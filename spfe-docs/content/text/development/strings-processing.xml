<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of the SPFE Open Toolkit. See the accompanying license.txt file for applicable licenses.-->
<!-- (c) Copyright Analecta Communications Inc. 2012 All Rights Reserved. -->
<think-plan-do-topic xmlns="http://spfeopentoolkit.org/ns/spfe-docs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://spfeopentoolkit.org/ns/spfe-docs
    http://spfeopentoolkit.org/spfe-docs/topic-types/think-plan-do-topic/schemas/think-plan-do-topic.xsd">
    <head>
        <id>spfe-strings-processing</id>
        <history>
            <revision>
                <date>2014-06-11</date>
                <author>mbaker</author>
                <comment>New topic</comment>
                <status>In progress</status>
            </revision>
        </history>
        <index>
            <entry>
                <type>task</type>
                <term>processing strings</term>
            </entry>
            <entry>
                <type>feature</type>
                <term>strings</term>
            </entry>
        </index>
    </head>
    <body>
        <title>Processing strings</title>
        <understanding>
            <p><feature>Strings</feature> are a means of inserting variable text into a topic. If you <task>design a topic type</task>, or <task>write your own synthesis code</task> for a topic type, you may need to write code to process strings. In this case, you will need to understand how string processing works.</p>
            <p>Strings are a core feature of SPFE, but different plugins may extend the strings feature in different ways. This topic explains how strings are implemented in core SPFE and the EPPO-simple plugin.</p>
            <p>Core SPFE allows you to define strings in the configuration file. Strings can be specified at the <feature>doc set</feature> level in <config-setting>/spfe/doc-set/strings</config-setting> and at the <feature>topic set</feature> level in <config-setting>/spfe/topic-set/strings</config-setting>.</p>
            <p>In your scripts, you can retrieve strings directly from the <feature>$config variable</feature> or you can retrieve individual strings using the <spfe-build-function>sf:string()</spfe-build-function> function.</p>
            <p>In EPPO-simple, SPFE's strings are treated as global strings and can be retrieved from anywhere in code or in content. In content, a string is retrieved using the string-ref element. Strings can be defined in content, in particular, they can be defined inside of fragment and fragment-ref elements as local-strings. A string defined locally within a fragment overrides a global string with the same id. A string defined in a fragment is carried over to all references to that fragement with the fragment-ref tag. However, local strings can also be defined in the fragment-ref tag, and these will override the strings defined in the original fragment. In effect, this allows you to call a fragment with a set of string substitutions.</p>
            <p>Given an <feature>inline fragment definition</feature> like this:</p>
            <codeblock>&lt;fragment id="my-fragment">
    &lt;local-strings>
        &lt;string id="boy-name">Jack&lt;/string>
        &lt;string id="girl-name">Jill&lt;/string>
    &lt;local-strings>
    &lt;p>&lt;string-ref id-ref="boy-name"/> and &lt;string-ref id-ref="girl-name"/>
    went up the hill.&lt;/p>
&lt;/fragment>                     </codeblock>
        
        <p>This will be resolved by the default EPPO-simple synthesis routines into:</p>
        <codeblock>&lt;p>Jack and Jill went up the hill.&lt;/p></codeblock>
        <p>But if this fragment is then inserted in a different place using &lt;fragment-ref>, the
            string values can be redefined locally for that use.</p>
        <codeblock>&lt;fragment-ref id-ref="my-fragment">
    &lt;local-strings>
        &lt;string id="girl-name">Emily&lt;/string>
    &lt;/local-strings>
&lt;/fragment-ref></codeblock>
        <p>The default EPPO-simple synthesis routines will use the local value the
                <code>girl-name</code> string, rendering the fragment as:</p>
        <codeblock>&lt;p>Jack and Emily went up the hill.&lt;/p></codeblock>
        </understanding>
        <planning>
            <planning-question>
                <planning-question-title>Do I need to do something to support string processing in my own synthesis routines?</planning-question-title>
                <planning-question-body>
                    <p>Strings are resolved during the <feature>synthesis</feature> process. If you
                        write your own synthesis scripts you must provide support for string
                        processing, if you want it for your topic type. However, if you use the
                        standard EPPO-simple script modules that implement string processing, and
                        you do not require any special string processing of your own, you will not
                        need to do anything specific to support string processing.  </p>
                    <p>If you are writing a synthesis script for a new topic type, make sure that
                        the <spfe-build-variable>$strings</spfe-build-variable> variable is properly
                        defined and that the
                            <spfe-build-variable>$in-scope-strings</spfe-build-variable> variable is
                        passed as a tunneling parameter to the top level content processing
                        template. If you are not using schema componets that do this, you must do it
                        yourself.</p>
                </planning-question-body>
            </planning-question>
            <planning-question>
                <planning-question-title>Why would I want to do custom string processing?</planning-question-title>
                <planning-question-body>
                    <p>In most cases, you will not want to do custom string processing. Custom
                        string processing essentially allows you to control which definition of a
                        string is used for string substitution. Unless you want to control string
                        substitution in some way, there is no reason </p>
                    <p>The most likely reason for wanting to do custom string processing is to
                        create an element that creates a local string scope. In the default
                        EPPO-simple schemas, two elements fragment, and fragment-ref create local
                        string scopes. This is so that you can define a different set of string
                        substitutions each time you use a fragment. If you wanted to create an
                        element that has local string values defined, the best approach would be to
                        copy the method used in fragment and fragment-ref.</p>
                </planning-question-body>
            </planning-question>
        </planning>
        <doing>
            <p/>
        </doing>
    </body>
</think-plan-do-topic>
