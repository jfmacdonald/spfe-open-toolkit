<?xml version="1.0" encoding="UTF-8"?>
<generic-topic xmlns="http://spfeopentoolkit.org/spfe-docs/schemas/topic-types/generic-topic"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://spfeopentoolkit.org/spfe-docs/schemas/topic-types/generic-topic http://spfeopentoolkit.org/spfe-docs/schemas/topic-types/generic-topic.xsd">
    <head>
        <base-uri>http://spfeopentoolkit.org/spfe-docs/content</base-uri>
        <name>background-build-system</name>
        <author>mbaker</author>
        <status>In progress</status>
        <history>
            <revision>
                <date>2012-04-22</date>
                <author>mbaker</author>
                <comment>New topic</comment>
                <new-status>In progress</new-status>
            </revision>
        </history>
        <index>
            <entry>
                <type>feature</type>
                <term>build system</term>
            </entry>
        </index>
    </head>
    <body>
        <title>How the build system works</title>
        <p>This is the background on how the build system works.</p>
        <p>The build tool for a SPFE build is a shell script (UNIX) or batch file (Windows) called <tool-name>spfe</tool-name>. This script takes two parameters, a <feature>SPFE configuration file</feature> and a <feature>build command</feature>. The script does the following:</p>
        <p>It runs an XSLT script (<file-name>spfe-ot/scripts/config/config.xsl</file-name>, which reads the specified configuration file, resolves any inclusions, and create three outputs:</p>
        <ol>
            <li>
                <p>A fully resolved configuration file (in which all includes have been processes and all defines have been expanded). This file is created in a /config directory under the build directory (which is given by the configuration setting <xml-element-name>/spfe/build/build-directory</xml-element-name>). This config file is passed to every script in the rest of the build process, making all the relevant configuration information available to all scripts. This allows the scripts to have a uniform interface, which reduces the need to <task>customize build rules</task> when writing your own scripts.</p>
            </li>
            <li>
                <p>A generated XSLT script file for each stage of the build. These files are generated by creating a wrapper file that imports each of the script listed in the appropriate sections of <xml-element-name>/spfe/scripts</xml-element-name> in the configuration file. These scripts are created in the build directory .</p>
            </li>
            <li>
                <p>An ANT build file, which contains ANT property and files definitions, and imports either the custom build rules (if specified by <xml-element-name>/spfe/build/build-rules</xml-element-name>) or the standard SPFE build rules file, <file-name>spfe-ot/1.0/build-tools/spfe-rules.xml</file-name>. The build file is created in the user's temp directory.</p>
            </li>
        </ol>
        <p>Next, the <feature>spfe</feature> script runs ANT on the generated ANT build file. What happens next depends on the kind of build file the <file-name>config.xsl</file-name> script created. If the configuration file did not contain a <xml-element-name>/spfe/doc-set</xml-element-name> element, it runs the build command for a single topic set. If it found a <xml-element-name>/spfe/doc-set</xml-element-name> element, it creates a build file that runs the build command for each of the topic sets listed in the <xml-element-name xpath="/spfe/doc-set">doc-set</xml-element-name> element. Essentially, each topic set build is done independently using the same process described here, except that in this case it is the generated ANT build file that runs the process, rather than the <tool-name>spfe</tool-name> script.</p>
        <p>The following build command are available:</p>
        <ul>
            <li>
                <p><code>cat</code>: generates the <feature>link catalogs</feature> for the topic set. The link catalogs must be built first in order for links to be created by the build.</p>
            </li>
            <li>
                <p><code>draft</code>: generates a draft build. </p>
            </li>
            <li>
                <p><code>final</code>: generates a final build.</p>
            </li>
            <li>
                <p><code>clean</code>: removes all the temporary files and output files from previous builds. Does not remove link catalog files.</p>
            </li>
        </ul>
        <p>If you are making changes to scripts or configuration files, you should always run clean before running a new draft, since the dependency checking in the build does not cover the scripts and configuration file. (In the Alpha version of the toolkit, it is not a given that it covers all the things it should cover, so when in doubt, clean before you build a draft. The tools will force a clean before building a final, just to be certain.</p>
        <p>From this point on, the build proceeds by running each build step in turn according to the order specified in either the <file-name>spfe-rules.xml</file-name> file or in the custom build rules file specified in the configuration. Each step reads one or more source files and outputs one or more XML files that form the input to the next set, or the final (possibly non-XML) output.</p>
            <p>In general the build order is synthesis, presentation, formatting, and (if necessary) encoding. However, in practice more steps may be involved. For instance, the creation of the link catalogs is a separate step run on the synthesis files. The presentation scripts then take both the synthesis files and the link catalog files as input and outputs the presentation file or files which are the input to the formatting stage. If the build is pulling content from sources other than content created by authors, as the build for the SPFE Configuration Reference does when it extracts content from the configuration schema, that extraction is a separate step at the synthesis stage.</p>
                <p>The synthesis, presentation, formatting, encoding sequence, from which SPFE takes its name, is therefore more of a general outline of the process than a strictly prescribed set of steps. The overriding SPFE principle is that each stage of the process should do only one thing. This helps ensure the simplicity of each step, and the code that implements it, and improves modularity and reuse of the code.</p>
    </body>
</generic-topic>
