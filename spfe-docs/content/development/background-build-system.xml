<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of the SPFE Open Toolkit. See the accompanying license.txt file for applicable licenses.-->
<!-- (c) Copyright Analecta Communications Inc. 2012 All Rights Reserved. -->

<generic-topic xmlns="http://spfeopentoolkit.org/spfe-docs/topic-types/generic-topic"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://spfeopentoolkit.org/spfe-docs/topic-types/generic-topic http://spfeopentoolkit.org/spfe-docs/topic-types/generic-topic/schemas/generic-topic.xsd">
    <head>
        <id>background-build-system</id>
        <history>
            <revision>
                <date>2012-04-22</date>
                <author>mbaker</author>
                <comment>New topic</comment>
                <status>In progress</status>
            </revision>
            <revision>
                <date>2013-07-11</date>
                <author>jkeffer</author>
                <comment>Updates for current toolkit functionality</comment>
                <status>In progress</status>
            </revision>
        </history>
        <index>
            <entry>
                <type>feature</type>
                <term>build system</term>
            </entry>
        </index>
    </head>
    <body>
        <title>How the build system works</title>
        <p>The SPFE build system is highly configurable and flexible.</p>
        <p>The build tool for a SPFE build is a shell script (UNIX) or batch file (Windows) called
                <tool-name>spfe</tool-name>. This script takes two parameters, a
                <feature>configuration file</feature> and a <feature>build command</feature>. It
            runs an XSLT script (<file-name>spfe-ot/scripts/config/config.xsl</file-name>) that
            reads the specified configuration file, resolves any inclusions, and creates the
            following files:</p>
        <ol>
            <li>
                <p>A fully resolved configuration file. This file is created in the subdirectory
                        <directory-name>config</directory-name>  under the <feature>build directory</feature>. This
                    configuration file is passed to every script in the rest of the build process,
                    making all the relevant configuration information available to all scripts. This
                    allows the scripts to have a uniform interface, which reduces the need to
                        <task>customize build rules</task> when writing your own scripts.</p>
            </li>
            <li>
                <p>A generated XSLT script file for each stage of the build. These files are
                    generated by creating a wrapper file that imports each script listed in the
                    appropriate sections of the configuration element
                    <config-setting>/spfe/topic-type/scripts</config-setting>, <config-setting>/spfe/output-format/scripts</config-setting>, and <config-setting>/spfe/object-type/scripts</config-setting>. These generated scripts are
                    created in the <feature>build directory</feature>.</p>
            </li>
            <li>
                <p>An ANT build file, which contains ANT property and file definitions, and imports
                    either the custom build rules (if defined by
                    <config-setting>/spfe/topic-set/build-rules</config-setting> element) or the
                    default SPFE build rules file,
                        <file-name>spfe-ot/1.0/build-tools/spfe-rules.xml</file-name>.</p>
            </li>
        </ol>
        <p>Next, the <tool-name>spfe</tool-name> build tool runs <tool-name>ANT</tool-name> on the generated ANT build
            file, building the <feature>documentation set</feature>. </p>
        <p>The order of operations for the build is as follows:</p>
        <ol>
            <li>
                <p>Run the <feature>synthesis process</feature> for each topic set in turn in the order they are listed in the <config-setting>/spfe/doc-set/topic-sets</config-setting> configuration setting. This involved running the extract, synthesis, toc, and link catalog scripts for each topic set in turn. Running the scripts in the order in which the topic sets are defined is important because it allows the scripts of later topic sets to access the synthesis, tocs, and link catalogs of the earlier topics. This is used, for instance, to generate <feature>subject list pages</feature> that draw from the entire documentation set.</p> 
            </li>
            <li>
                <p>Run the <feature>presentation process</feature> for each <feature>topic set</feature> in the <feature>documentation set</feature> in turn. If there are different presentation processes for different output media, each will be run in turn.</p>
            </li>
            <li>
                <p>Run the <feature>format process</feature> for each <feature>topic set</feature> in the <feature>documentation set</feature> in turn. If there are multiple output formats being built, each will be run in turn.</p>
            </li>
        </ol>
        <p>The following build command are available:</p>
        <ul>
            <li>
                <p><code>cat</code>: Generates the <feature>link catalogs</feature> for the topic
                    set. The link catalogs must be built first to enable the build to create the
                    links.</p>
            </li>
            <li>
                <p><code>draft</code>: Generates a draft build. Output includes work-in-progress
                    information and an indication of draft status.</p>
            </li>
            <li>
                <p><code>final</code>: Generates a final deployment-ready build.</p>
            </li>
            <li>
                <p><code>-clean</code>: Removes all the temporary files and output files from
                    previous builds except for link catalog files.</p>
            </li>
        </ul>
        <p>If you make changes to scripts or configuration files, you should always run clean before
            building a new draft, since the dependency checking in the build does not cover the
            scripts and configuration file. In the Alpha version of the toolkit, it is not a given
            that it covers all the things it should cover, so when in doubt, run clean before you
            build a draft. The tools run clean before a final build, just to be certain.</p>
     </body>
</generic-topic>
