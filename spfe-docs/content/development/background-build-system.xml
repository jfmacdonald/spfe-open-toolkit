<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of the SPFE Open Toolkit. See the accompanying license.txt file for applicable licenses.-->
<!-- (c) Copyright Analecta Communications Inc. 2012 All Rights Reserved. -->
<?xml-stylesheet type="text/css" href="../../style/authoring/spfe-docs.css"?>
<generic-topic xmlns="http://spfeopentoolkit.org/spfe-docs/schemas/authoring/generic-topic"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://spfeopentoolkit.org/spfe-docs/schemas/authoring/generic-topic http://spfeopentoolkit.org/spfe-docs/schemas/authoring/generic-topic.xsd">
    <head>
        <uri>http://spfeopentoolkit.org/spfe-docs/content/development/background-build-system.xml</uri>
        <author>mbaker</author>
        <status>In progress</status>
        <history>
            <revision>
                <date>2012-04-22</date>
                <author>mbaker</author>
                <comment>New topic</comment>
                <new-status>In progress</new-status>
            </revision>
            <revision>
                <date>2013-07-11</date>
                <author>jkeffer</author>
                <comment>Updates for current toolkit functionality</comment>
                <new-status>In progress</new-status>
            </revision>
        </history>
        <index>
            <entry>
                <type>feature</type>
                <term>build system</term>
            </entry>
        </index>
    </head>
    <body>
        <title>How the build system works</title>
        <p>The SPFE build system is highly configurable and flexible.</p>
        <p>The build tool for a SPFE build is a shell script (UNIX) or batch file (Windows) called
                <tool-name>spfe</tool-name>. This script takes two parameters, a
                <feature>configuration file</feature> and a <feature>build command</feature>. It
            runs an XSLT script (<file-name>spfe-ot/scripts/config/config.xsl</file-name>) that
            reads the specified configuration file, resolves any inclusions, and creates the
            following files:</p>
        <ol>
            <li>
                <p>A fully resolved configuration file (in which all includes have been processed
                    and all defines have been expanded). This file is created in the subdirectory
                        <directory-name>config</directory-name>  under the build directory (defined
                    by the configuration element 
                    <config-setting>/spfe/build/build-directory</config-setting>). This
                    configuration file is passed to every script in the rest of the build process,
                    making all the relevant configuration information available to all scripts. This
                    allows the scripts to have a uniform interface, which reduces the need to
                        <task>customize build rules</task> when writing your own scripts.</p>
            </li>
            <li>
                <p>A generated XSLT script file for each stage of the build. These files are
                    generated by creating a wrapper file that imports each script listed in the
                    appropriate sections of the configuration element
                    <config-setting>/spfe/scripts</config-setting>. These generated scripts are
                    created in the <feature>build directory</feature> (defined by the
                    <config-setting>/spfe/build/build-directory</config-setting> element).</p>
            </li>
            <li>
                <p>An ANT build file, which contains ANT property and file definitions, and imports
                    either the custom build rules (if defined by
                    <config-setting>/spfe/build/build-rules</config-setting> element) or the
                    default SPFE build rules file,
                        <file-name>spfe-ot/1.0/build-tools/spfe-rules.xml</file-name>. The build
                    file is created in the directory <directory-name>spfebuild/temp</directory-name>
                    under the user's HOME directory (set in the <tool-name>spfe</tool-name> build
                    tool file).</p>
            </li>
        </ol>
        <p>Next, the <tool-name>spfe</tool-name> build tool runs ANT on the generated ANT build
            file. What happens next depends on the contents of build file the
                <file-name>config.xsl</file-name> script created. If the configuration file does not
            define a <config-setting>/spfe/doc-set</config-setting> element, the build file
            contains the properties and file definitions to run the build command for a single topic
            set. </p>
        <p>If the configuration file defines a <config-setting>/spfe/doc-set</config-setting>
            element, the <file-name>config.xsl</file-name> script creates a file for each topic set
            listed in the <config-setting xpath="/spfe/doc-set">/spfe/doc-set</config-setting>
            element. Each file contains the properties and definitions for the topic set. The build
            file contains the information to run the build command for each topic set and uses the
            topic set specific files. Essentially, each topic set build is done independently using
            the same process, except that the generated ANT build file runs the process instead of
            the <tool-name>spfe</tool-name> build tool.</p>
        <p>The following build command are available:</p>
        <ul>
            <li>
                <p><code>cat</code>: Generates the <feature>link catalogs</feature> for the topic
                    set. The link catalogs must be built first to enable the build to create the
                    links.</p>
            </li>
            <li>
                <p><code>draft</code>: Generates a draft build. Output includes work-in-progress
                    information and an indication of draft status.</p>
            </li>
            <li>
                <p><code>final</code>: Generates a final deployment-ready build.</p>
            </li>
            <li>
                <p><code>clean</code>: Removes all the temporary files and output files from
                    previous builds except for link catalog files.</p>
            </li>
        </ul>
        <p>If you make changes to scripts or configuration files, you should always run clean before
            building a new draft, since the dependency checking in the build does not cover the
            scripts and configuration file. In the Alpha version of the toolkit, it is not a given
            that it covers all the things it should cover, so when in doubt, run clean before you
            build a draft. The tools run clean before a final build, just to be certain.</p>
        <p>From this point on, the build runs each build step according to the order specified in
            either the <file-name>spfe-rules.xml</file-name> file or in the custom build rules file
            specified by the <config-setting>/spfe/build/build-rules</config-setting> element in
            the configuration file. Each step reads one or more source files and outputs one or more
            XML files that form the input to the next step, or the final (possibly non-XML)
            output.</p>
            <p>In general, the build order is synthesis, presentation, formatting, and (if
            necessary) encoding. However, in practice more steps may be involved. For instance, the
            creation of the link catalogs is a separate step run on the synthesis files. The
            presentation scripts then take both the synthesis files and the link catalog files as
            input and output the presentation file or files which are the input to the formatting
            stage. If the build uses content from sources other than content created by authors,
            (for example, the build for the SPFE Configuration Reference extracts content from the
            configuration schema), extraction is a separate step at the synthesis stage.</p>
                <p>The synthesis, presentation, formatting, encoding sequence, from which SPFE takes
            its name, is therefore more of a general outline of the process than a strictly
            prescribed set of steps. The overriding SPFE principle is that each stage of the process
            should do only one thing. This helps ensure the simplicity of each step and the code
            that implements it, and improves modularity and reuse of the code.</p>
    </body>
</generic-topic>
