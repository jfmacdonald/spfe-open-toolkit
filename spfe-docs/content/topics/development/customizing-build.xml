<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of the SPFE Open Toolkit. See the accompanying license.txt file for applicable licenses.-->
<!-- (c) Copyright Analecta Communications Inc. 2012 All Rights Reserved. -->

<think-plan-do-topic xmlns="http://spfeopentoolkit.org/ns/spfe-docs"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://spfeopentoolkit.org/ns/spfe-docs
    http://spfeopentoolkit.org/spfe-docs/topic-types/think-plan-do-topic/schemas/authoring/think-plan-do-topic.xsd">

    <head>
        <id>customizing-build</id>
        <history>
            <revision>
                <date>2012-03-22</date>
                <author>mbaker</author>
                <comment>New topic</comment>
                <status>Not started</status>
            </revision>
        </history>
        <index>
            <entry>
                <type>task</type>
                <term>customize build system</term>
            </entry>
            <entry>
                <type>config-setting</type>
                <term>/spfe</term>
            </entry>
        </index>
    </head>
    <body>
        <title>Customizing the build</title>
        <understanding>
            <p>The default SPFE build file (<file-name>spfe-rules.xml</file-name>) implements a standard order of build steps for each stage which will work for most <feature>topic sets</feature>. However, sometimes you will want to insert additional steps into the build, particularly at the <feature>synthesis</feature> stage. If you have a complex process at any stage of the build, it is better to break it up into multiple steps, each of which does one thing, and which produces an XML file to be read by the next stage of the build.</p>
       </understanding>
       <planning>
           <planning-question>
                <planning-question-title>Do I need to change the build order?</planning-question-title>
                <planning-question-body>
                    <p>The default build order invokes a single build file covering the synthesis,
                        presentation, format, and encode stages. Each of those stage may also be
                        broken up into multiple steps. If you want to add an additional step to any
                        of these stages, you will need to change the build order.</p>
                    <p>The most common reason for changing the build order is to do custom
                        processing of source files to create topics, or to combine externally
                        sourced material with authored material to produce topics. You would then
                        run a regular or custom synthesis step on the resulting topic files. Note,
                        however, that the standard build process already includes two steps called
                            <feature>extract</feature> and <feature>merge</feature>. These steps are
                        intended for extracting content from external sources and for merging
                        content from different sources together. In most cases, writing scripts for
                        these steps should enable you to handle any custom pre-processing you may
                        need to do. These steps are invoked automatically when a topic set
                        configuration contains an entry for the
                        <config-setting>source-to-extract-content-from</config-setting> setting.  </p>

                </planning-question-body>

            </planning-question>
       </planning>
        

<doing>        
    <p>To change the build order, write an ant rules file describing the steps of your build. You
                don't have to describe the complete build order in your build file. You can import
                    <file-name>spfe-rules.xml</file-name> into your build file and then override the
                rules you want to change. To make this easier, <file-name>spfe.rules</file-name>
                defines an intermediate target for each build step that has a dependency on the main
                build rules for that step. Rather than overriding the main build rule, you can just
                override the intermediate rule and add your custom rules to its dependency list.</p>
        <p>The main build targets have names starting with two hyphens. For instance, the main synthesis rules is called <code>--build.synthesis</code>. The intermediate build rules have the same name starting with one hyphen, for instance, <code>-build.synthesis</code>. The <code>-build.synthesis</code> rule contains just a dependency on the main build rule, so in <file-name>spfe.rules</file-name> the <code>-build.synthesis</code> rule looks like this:</p>
        <codeblock>
<![CDATA[<target name="-build.synthesis" depends="--build.synthesis"/>]]>
        </codeblock>
        
        <p>To override this rule and insert a build step before the main synthesis step, you write a build rules file like this:</p>
        
        <codeblock> 
        <![CDATA[
<project name="my-custom-build-rules" basedir="." default="draft">

    <import file="${SPFEOT_HOME}/1.0/build-tools/spfe-rules.xml"/>
    
    <target name="-synthesis" depends="--my-custom-synthesis-rule, --build.synthesis">
    
    <target name="--my-custom-synthesis-rule">
        <!-- your build rules here -->
    </target>
</project>
        ]]>
        </codeblock>
            <!--Need to deal with standard directory locations for input and outputs. To override, you need the next step to know where to look. Not sure if this is implemented yet.-->
        
        <p>This build rule causes your custom synthesis rule to be called first, and then the standard synthesis rule. Obviously, if you do this you must create XML output in the place the default synthesis rule expects to find it. Alternatively, you can omit the default synthesis rule entirely, in which case your custom synthesis rule must create a syntheis XML document or documents in the place the presentation rule expects to find it.</p>
    <!-- FIXME: Out of date. Fix. -->
        <p>The list of build rules designed to be overridable in this way is:</p>
        <ul>
            <li>
                <p>-build.sysnthesis</p>
            </li>
            <li>
                <p>-build.presentation</p>
            </li>
            <li>
                <p>-build.presentation-book</p>
            </li>
            <li>
                <p>-build.html-format</p>
            </li>
            <li>
                <p>-build.fo-format</p>
            </li>
            <li>
                <p>-build.pdf-encode</p>
            </li>
        </ul>
        <p>To make your new build file the build file used for your topic set build, you add a <config-setting>/topic-set/build-rules</config-setting> element to the configuration file for that topic set:</p>

<codeblock>
    <![CDATA[
<spfe>
    ...
    <build-rules>${MY_PROJECT_HOME}/build-tools/my-custom-build-rules.xml</build-rules>
    ...
</spfe>
    ]]>
</codeblock>
</doing>
    </body>
</think-plan-do-topic>
