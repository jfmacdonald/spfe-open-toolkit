<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of the SPFE Open Toolkit. See the accompanying license.txt file for applicable licenses.-->
<!-- (c) Copyright Analecta Communications Inc. 2012 All Rights Reserved. -->

<feature-topic xmlns="http://spfeopentoolkit.org/ns/spfe-docs"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://spfeopentoolkit.org/ns/spfe-docs http://spfeopentoolkit.org/spfe-docs/topic-types/feature-topic/schemas/authoring/feature-topic.xsd">
    <head>
        <id>feature-structures</id>
        <history>
            <revision>
                <date>2015-01-20</date>
                <author>mbaker</author>
                <comment>New Topic</comment>
                <status>In progress</status>
            </revision>
        </history>
        <index>
            <entry>
                <type>feature</type>
                <term>structure</term>
            </entry>
            <entry>
                <type>feature</type>
                <term>structures</term>
            </entry>
        </index>
    </head>
    <body>
        <title>Structures</title>
        <p><feature>Structures</feature> are a <task>topic type definition</task> feature of the
                <feature>SPFE open toolkit</feature>. You can rapidly <task>define a new topic
                type</task> by plugging together existing structures or you can create your own
            structures to define multiple topic types. Structures package together schema
            components, processing script components, and style components required to support the
            authoring, publishing, and processing of common topic structures such as
                <eppo-simple-structure-name>lists</eppo-simple-structure-name>,
                <eppo-simple-structure-name>tables</eppo-simple-structure-name>,
                <eppo-simple-structure-name>admonitions</eppo-simple-structure-name>, and
                <eppo-simple-structure-name>annotations</eppo-simple-structure-name>. </p>
        <p>An XML document consists entirely of nested element structures. In this sense, every
            element is a separate structure. However, in practice there are a number of higher level
            structures that recur at many places in a document type and across many document types.
            XML schema languges recognize this fact by providing features such as complex types and
            schema groups that encapsulate complex structures for reuse within and between schemas.
            Examples of such reusable structure include lists and tables. SPFE Structures take this
            concept one step further by packaging style and processing information with schema
            structures to allow you to plug and play structures into your topic type
            definitions.</p>
        <p>Structures make it easy to create <concept>minimal topic types</concept> that contain the
            minimal markup required for a specific topic type for your business. Creating minimal
            topic types makes it easier to author content that meets your requirements and easier to
            define reliable processing for publishing your content in as many forms as required. It
            allows you to create topic models that express the specifics of the <concept>topic
                patterns</concept> that matter to your business. This supports greater automation
            and validation of content, which leads to greater consistency and quality, as well as
            supporting higher degrees of automation. </p>
        <p>Using a structure in your topic type requires a slightly different procedure for schemas,
            scripts, and styles. (Eventually these differences will be eliminated by
            automation.)</p>
        <section>
            <title>Using a structure in a schema</title>
            <p>A structure can provide schemas for authoring, presentation, formatting, or encoding. </p>
            <p>To use a structure in a schema, you simply import the appropriate schema file from
                the structure directory. </p>
            <codeblock>&lt;xs:include schemaLocation="http://spfeopentoolkit.org/spfe-ot/plugins/eppo-simple/structures/annotations/xslt/schemas/authoring/annotations-xslt.xsd"/></codeblock>
            <p>However, to integrate the element structures defined by the structure schema into the
                your topic type schema, you need to use either the group or type defined in the
                structure schema in your topic type schema.</p>
            <p>Each properly defined structure schema should define a schema group and a type
                (simple or complex) that contain the XML elements that make up the structure. The
                following example show the definition of the <feature>eppo-simple</feature>
                <eppo-simple-structure-name>fig</eppo-simple-structure-name> structure, which
                defines a complex type named fig and a group named fig, which is defined using the
                fig type:</p>
            <codeblock>    &lt;xs:group name="fig">
        &lt;xs:choice>
            &lt;xs:element name="fig" type="fig"/>
        &lt;/xs:choice>
    &lt;/xs:group>


    &lt;xs:complexType name="fig">
        &lt;xs:sequence>
            &lt;xs:element name="title" type="xs:string"/>
            &lt;xs:element name="caption" minOccurs="0">
                &lt;xs:complexType>
                    &lt;xs:sequence>
                        &lt;xs:group ref="paragraph" minOccurs="0" maxOccurs="unbounded"/>
                    &lt;/xs:sequence>
                &lt;/xs:complexType>
            &lt;/xs:element>
            &lt;xs:group ref="fig-content"/>
        &lt;/xs:sequence>
        &lt;xs:attributeGroup ref="conditions"/>
        &lt;xs:attribute name="id" type="xs:NMTOKEN"/>
    &lt;/xs:complexType>
</codeblock>
            <p>Note that the group defines an element named
                <eppo-simple-element-name>fig</eppo-simple-element-name> of type fig. This means
                that you can incorporate this structure in your schema either by including the group
                in the content model of an element or by defining a new element and giving it the
                type fig. The second approach would allow you to give the structure element any name
                you liked. Unless you have a good reason to change the name, however, it is better
                to use the group. In the following example, the group <eppo-simple-group-name>fig</eppo-simple-group-name> is included in the group
                <eppo-simple-group-name>text-general</eppo-simple-group-name>, which is a standard group in EPPO-simple that is used to define all
                the elements that can occur at the general text level of a topic
                types schema (that is, ordinary textual content inside a topic or section, but not in a list or a table or some other substructure that might have a more restrictive model. This illustrates how groups are used to build a schema by nesting
                structures (defined by groups) one inside the other.</p>
            <codeblock>    &lt;xs:group name="text-general">
        &lt;xs:sequence>
            &lt;xs:choice maxOccurs="1" minOccurs="1">
                &lt;xs:group ref="paragraph"/>
                &lt;xs:group ref="fragments"/>
                &lt;xs:group ref="fragment-ref"/>
            &lt;/xs:choice>
            &lt;xs:choice maxOccurs="unbounded" minOccurs="0">
                &lt;xs:group ref="paragraph"/>
                &lt;xs:group ref="subhead"/>
                &lt;xs:group ref="lists.ol-ul-ll"/>
                &lt;xs:group ref="codeblock"/>
                &lt;xs:group ref="fig"/>
                &lt;xs:group ref="fragments"/>
                &lt;xs:group ref="fragment-ref"/>
                &lt;xs:group ref="table"/>
                &lt;xs:group ref="object-ref"/>
                &lt;xs:group ref="admonitions"/>
                &lt;xs:group ref="comments-block"/>
                &lt;xs:group ref="labeled-item"/>
                &lt;xs:group ref="procedure"/>
                &lt;xs:group ref="instructions"/>
            &lt;/xs:choice>
        &lt;/xs:sequence>
    &lt;/xs:group></codeblock>
        </section>
        <section>
            <title>Adding a structure to processing scripts</title>
            <p>The <feature>SPFE build</feature> process automatically constructs processing scripts
                for each step of the build. These scripts are assembled by including script
                fragments identified by the configuration files for <feature>topic types</feature>,
                    <feature>object types</feature>, and <feature>structures</feature>. Structures
                are used to build topic types, so each topic type configuration should include the
                structure configuration for each type it uses. The following example define a topic
                type which included several structures. The scripts defined in the structure
                configuration files will be added to those defined for the topic type itself to
                create a complete processing script for the topic type.</p>
            <codeblock>    &lt;topic-type>
        &lt;name>{http://spfeopentoolkit.org/ns/spfe-docs}spfe-configuration-reference-entry&lt;/name>
        &lt;aliases>
            &lt;singular>Configuration setting&lt;/singular>
            &lt;plural>Configuration settings&lt;/plural>
        &lt;/aliases>
        &lt;structures>
            &lt;structure>
                &lt;name>eppo-core&lt;/name>
                &lt;href>${SPFEOT_HOME}/plugins/eppo-simple/structures/eppo-core/config.xml&lt;/href>
                &lt;rewrite-namespace>
                    &lt;from>http://spfeopentoolkit.org/ns/eppo-simple&lt;/from>
                    &lt;to>http://spfeopentoolkit.org/ns/spfe-docs&lt;/to>
                &lt;/rewrite-namespace>  
            &lt;/structure>
            &lt;structure>
                &lt;name>spfe-docs-core&lt;/name>
                &lt;href>../../structures/spfe-docs-core/config.xml&lt;/href>
            &lt;/structure>
            &lt;structure>
                &lt;name>topic&lt;/name>
                &lt;href>${SPFEOT_HOME}/plugins/eppo-simple/structures/topic/config-with-resolve-main.xml&lt;/href>
            &lt;/structure>
            &lt;structure>
                &lt;name>topic-set&lt;/name>
                &lt;href>${SPFEOT_HOME}/plugins/eppo-simple/structures/topic-set/config-with-topic-set-toc.xml&lt;/href>
                &lt;rewrite-namespace>
                    &lt;from>http://spfeopentoolkit.org/ns/eppo-simple&lt;/from>
                    &lt;to>http://spfeopentoolkit.org/ns/spfe-docs&lt;/to>
                &lt;/rewrite-namespace>  
            &lt;/structure>
        &lt;structure>
                &lt;name>graphic-record&lt;/name>
                &lt;href>${SPFEOT_HOME}/plugins/eppo-simple/structures/graphic-record/config.xml&lt;/href>
            &lt;/structure>
        &lt;/structures>
        
        &lt;scripts>
            &lt;extract>
                &lt;script>
                    &lt;href>scripts/extract/schema-defs.xsl&lt;/href>
                &lt;/script>
                &lt;script>
                    &lt;href>${SPFEOT_HOME}/1.0/scripts/common/utility-functions.xsl&lt;/href>
                &lt;/script>
            &lt;/extract>
            &lt;merge>
                &lt;script>&lt;href>scripts/merge/merge-config-ref.xsl&lt;/href>&lt;/script>
                &lt;script>&lt;href>${SPFEOT_HOME}/1.0/scripts/common/utility-functions.xsl&lt;/href>&lt;/script>
            &lt;/merge>
            &lt;resolve>
                &lt;script>
                    &lt;href>scripts/resolve/resolve-config-ref.xsl&lt;/href>
                &lt;/script>
                &lt;script>
                    &lt;href>${SPFEOT_HOME}/1.0/scripts/common/utility-functions.xsl&lt;/href>
                &lt;/script>               
            &lt;/resolve>
            &lt;present type="eppo">
                &lt;script>
                    &lt;href>scripts/present/eppo/present-config-ref.xsl&lt;/href>
                &lt;/script>
            &lt;/present>
            &lt;toc>
                &lt;script>
                    &lt;href>../../topic-types/config-reference/scripts/toc/schema-toc.xsl&lt;/href>
                &lt;/script>
            &lt;/toc>
        &lt;/scripts>
    &lt;/topic-type></codeblock>
        </section>
        <section>
            <title>Using a structures file</title>
            <p>In many cases, you will want to define a common set of structures to be used across
                many different topic types. Rather than include those structures separately in each
                topic type configuration, you can define a structures configuration file, which is
                simply a list of structures. In the example above, the structures eppo-core and
                spfe-docs-core point to structures files rather than to individual structures.</p>
        </section>
        <section>
            <title>Rewriting namespaces</title>
            <p>SPFE makes use of <feature>namespaces</feature> when defining schemas. When you use a
                structure to define a topic type, you need to make sure that the structure comes in
                using the correct namespace. You can use a structure to bring in elements in the
                same namespace as your main schema or as a different namespace (see the
                    <eppo-simple-structure-name>graphic-record</eppo-simple-structure-name>
                structure for an example of this). In most cases you will want the structures to
                become part of the current namespace. </p>
            <p>This is not a problem for schemas, since you can use the <concept>chameleon schema
                    pattern</concept> to define structures. This is what the EPPO-simple structure
                set does with most structures. Structures are defined without a namespace and take
                on the namespace of whatever schema they are included into. (The
                    <eppo-simple-structure-name>graphic-record</eppo-simple-structure-name>
                structure is an exception to this. It is defined in its own namespace.)</p>
            <p>XSLT scripts, however, do not support the chameleon pattern. Every xpath expression
                in a script is matched in a specific namespace. All scrips in the EPPO-simple
                structure sets that are paired with schemas that are in no namespace are match
                element names in the EPPO-simple namespace
                    (<xml-namespace-uri>http://spfeopentoolkit.org/ns/eppo-simple</xml-namespace-uri>).
                If your schemas are in a different namespace, you need to tell the configuration
                system to rewrite the namespaces in those scripts to the namespace of your schemas.
                The SPFE docs are in the SPFE-docs namespace
                    (<xml-namespace-uri>http://spfeopentoolkit.org/ns/spfe-docs</xml-namespace-uri>),
                so when the SPFE docs use an EPPO simple structure, they need to rewrite the
                namespace when they include the structure:</p>
            <codeblock>            &lt;structure>
                &lt;name>topic-set&lt;/name>
                &lt;href>${SPFEOT_HOME}/plugins/eppo-simple/structures/topic-set/config-with-topic-set-toc.xml&lt;/href>
                &lt;rewrite-namespace>
                    &lt;from>http://spfeopentoolkit.org/ns/eppo-simple&lt;/from>
                    &lt;to>http://spfeopentoolkit.org/ns/spfe-docs&lt;/to>
                &lt;/rewrite-namespace>  
            &lt;/structure></codeblock>
        </section>
        <section>
            <title>Using CSS files from a structure</title>
            <p>A structure can provide CSS files for both authoring and formatting output.</p>
            <p>To use a CSS file from a structure, simply include it in your main CSS file:</p>
            <codeblock>@import url("http://spfeopentoolkit.org/spfe-docs/structures/annotations/spfe-build/style/authoring/annotations-spfe-build.css");</codeblock>
            <p>Selectors in a structure CSS file should be written to be as specific as possible to
                avoid conflicts with other CSS files. </p>
        </section>
    </body>
</feature-topic>
