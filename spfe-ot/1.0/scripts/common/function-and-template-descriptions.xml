<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of the SPFE Open Toolkit. See the accompanying license.txt file for applicable licenses.-->
<!-- (c) Copyright Analecta Communications Inc. 2012 All Rights Reserved. -->
<function-and-template-descriptions
    xmlns="http://spfeopentoolkit.org/ns/spfe-docs"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://spfeopentoolkit.org/ns/spfe-docs http://spfeopentoolkit.org/spfe-docs/topic-types/xslt-library-reference-entry/schemas/authoring/xslt-function-and-template-descriptions.xsd">
    <head>
        <id>function-and-template-descriptions</id>
        <history>
            <revision>
                <date>2012-09-21</date>
                <author>mbaker</author>
                <comment>New document.</comment>
                <status>In progress</status>
            </revision>
        </history>
    </head>
    <body>
        <namespace-uri>http://spfeopentoolkit.org/spfe-ot/1.0/functions</namespace-uri>
        <function-description>  
            <name>relative-from-absolute-path</name>
            <description>
                <p>The <xslt-function-name>relative-from-absolute-path</xslt-function-name> function takes a full system path and returns the portion of that path relative to a base path. For example, given the path</p>
                <codeblock>C:/Users/Joe/spfe-open-toolkit/spfe-ot/1.0/scripts/common/utility-functions.xsl</codeblock>
                <p>and the base path</p>
                <codeblock>C:/Users/Joe/spfe-open-toolkit/spfe-ot</codeblock>
                <p>it returns the part of the path after the base path:</p>
                <codeblock>/1.0/scripts/common/utility-functions.xsl</codeblock>
                <p>Optionally, you can specify a prefix to be added to the returned path:</p>
                <codeblock>&lt;xsl:value-of select="sf:relative-from-absolute-path(source-file, $config/config:spfeot-home,'$SPFEOT_HOME')"/>
                </codeblock>

                <p>In this example, <code>source-file</code> is an element containing the full path of a source file, <code>$config/config:spfeot-home</code> pulls the local path of the spfe open toolkit on the users machine from the config file, and <code>'$SPFEOT_HOME'</code> is a prefix string. Assuming that the value of <code>source-file</code> is <code>file:/C:/Users/Joe/spfe-open-toolkit/spfe-ot/1.0/scripts/common/utility-functions.xsl</code>, the return value will be:</p>
                <codeblock>$SPFEOT_HOME/1.0/scripts/common/utility-functions.xsl</codeblock>
                <p>The function does its best to normalize both the <code>path</code> and <code>base-path</code> parameters before comparing them. Any protocol part is removed from both strings (<code>file:/</code> in the example above), directory separators are normalized to forward slashes, and URL decoding is applied (so that if spaces are represented by <code>%20</code>, they will be replaced by regular spaces. This allows you to compare paths in different formats and encodings wihtout having to normalize them first.</p>
                <p>As the example shows, the principal motivation for this function is to assist in <task>generating documentation from source code</task>. If you write an extraction routine that captures the file name of the file it is extracting from, that name will contain the path of the local machine on which the extraction is run. You can use this function to remove the local portion of the file path and substitute a placeholder such as <code>$SPFEOT_HOME</code> in the example above.</p>
            </description>
            <return-value>
                <description>
                    <p>The function returns the portion of the <code>path</code> parameter after the end of the <code>base-path</code> parameter, prefixed with the value of the <code>prefix</code> parameter.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>path</name>
                    <description>
                        <p>An absolute path from which the relative path is to be extracted.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>base-path</name>
                    <description>
                        <p>An absolute path which will be subtracted from the <code>path</code> parameter to form the relative path.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>prefix</name>
                    <description>
                        <p>The prefix to be added to the start of the returned string.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>title-to-anchor</name>
            <description>
                <p>You can use the <xslt-function-name>title-to-anchor</xslt-function-name> function to convert a title text into a string that can be used as an anchor value. The function works by changing all characters not allowed in an anchor into underscores.</p>
                <p>Typical uses for this function occur in the presentation stage where you want to create an anchor so that a link can be created to a point inside a topic. Where no other identifier is available, you can use title-to-anchor to create a suitable anchor value.</p>

            </description>
            <return-value>
                <description>
                    <p>Returns a string in which the characters that would not be legal in an HTML anchor string have been converted to underscores.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>title</name>
                    <description>
                        <p>The title parameter is used to pass in the text of the title that is to be coverted to an anchor string.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>conditions-met</name>
            <description>
                <p>The <xslt-function-name>conditions-met</xslt-function-name> function is used to determine if a conditional element meets the conditions applied to the build. </p>
            </description>
            <return-value>
                <description>
                    <p>The return value is a boolean with true indicating that the conditions were met and fasle that the conditions were not met.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>conditions</name>
                    <description>
                        <p>The list of conditions applied to the element.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>condition-tokens</name>
                    <description>
                        <p>The list of condition tokens applied to the build.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>get-file-name-from-path</name>
            <description>
                <p>Returns the file name portion of a local path.</p>
            </description>
            <return-value>
                <description>
                    <p>The file name portion of the path.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>path</name>
                    <description>
                        <p>The path for which the file name is to be returned.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        
        <function-description>
            <name>get-sources</name>
            <description>
                <p>The <xslt-function-name>get-sources</xslt-function-name> is used to load a set of
                    XML source files into a variable. It takes a string value that contains a set of
                    file paths separated by semicolons. The function will fix directory separators
                    characters in the file paths. You should use the
                    <xslt-function-name>get-sources</xslt-function-name> function to load source
                    files, irrespective of whether you are loading one file or several. This makes
                    your script resilient if the number of source files should change, and also
                    allows for more flexibility in downstream processes, allowing them to produce
                    one file or many.</p>
            </description>
            <return-value>
                <description>
                    <p>Returns a sequence of XML documents named in the file list.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>file-list</name>
                    <description>
                        <p>A string containing a list of XML file paths separated by semi-colons.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>load-message</name>
                    <description>
                        <p>A string containing an optional message to be displayed by the script when loading a file. If specified, the message will be prepended to the name of each file as it is loaded, and displayed by a call to the <xslt-function-name>info</xslt-function-name> function.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        
        <function-description>
            <!-- Keep this description in sync with index-of-shortest-string -->
            <name>index-of-longest-string</name>
            <description>
                <p>The <xslt-function-name>index-of-longest-string</xslt-function-name> function returns the index of the longest string in a sequence of strings. To get the index of the shortest string, use <xslt-function-name>index-of-shortest-string</xslt-function-name>.</p>
                <p>For XSLT geeks: <xslt-function-name>index-of-longest-string</xslt-function-name> is a recursive polymorphic function. There is a version with one parameter, <code>strings</code>, that is the one you call from your code, and a version with four parameters, that is called by the first version, and which calls itself recursively, to do the work. It is unlikely you will ever want to call the second version yourself.</p>
            </description>
            <return-value>
                <description>
                    <p>The index of the longest string.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>strings</name>
                    <description>
                        <p>A sequence of strings.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>current</name>
                    <description>
                        <p>The index of the string currently being measured. You should not generally use this parameter in your code. It is used internally by the recursive function calls.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>length-of-longest</name>
                    <description>
                        <p>The length of the longest string seen so far as the function is called recursively. You should not generally use this parameter in your code.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>index-of-longest</name>
                    <description>
                        <p>The index of the longest string seen so far as the function is called recursively. You should not generally use this parameter in your code.</p>
                    </description>
                </parameter>
                
            </parameters>
        </function-description>
        <function-description>
            <!-- Keep this description in sync with index-of-longest-string -->
            <name>index-of-shortest-string</name>
            <description>
                <p>The <xslt-function-name>index-of-shortest-string</xslt-function-name> function returns the index of the shortest string in a sequence of strings. To get the index of the longest string, use <xslt-function-name>index-of-longest-string</xslt-function-name>.</p>
                <p>For XSLT geeks: <xslt-function-name>index-of-shortest-string</xslt-function-name> is a recursive polymorphic function. There is a version with one parameter, <code>strings</code>, that is the one you call from your code, and a version with four parameters, that is called by the first version, and which calls itself recursively, to do the work. It is unlikely you will ever want to call the second version yourself.</p>
            </description>
            <return-value>
                <description>
                    <p>The index of the shortest string.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>strings</name>
                    <description>
                        <p>A sequence of strings.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>current</name>
                    <description>
                        <p>The index of the string currently being measured. You should not generally use this parameter in your code. It is used internally by the recursive function calls.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>length-of-shortest</name>
                    <description>
                        <p>The length of the shortest string seen so far as the function is called recursively. You should not generally use this parameter in your code.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>index-of-shortest</name>
                    <description>
                        <p>The index of the shortest string seen so far as the function is called recursively. You should not generally use this parameter in your code.</p>
                    </description>
                </parameter>
                
            </parameters>
        </function-description>
        <function-description>
            <name>path-after-protocol-part</name>
            <description>
                <p>The <xslt-function-name>path-after-protocol-part</xslt-function-name> function takes a URL containing a protocol  (file, http, etc) and returns the part after the protocol. For example, if will turn a URL like this:</p>
                <codeblock>file:/c:/Users/Joe/spfe-open-toolkit/spfe-ot/spfe.bat</codeblock>
                <p>into</p>
                <codeblock>c:/Users/Joe/spfe-open-toolkit/spfe-ot/spfe.bat</codeblock>
                <p>This is mostly useful for taking local file URLs returned by some tools and turning them into the local paths accepted by other tools.</p>
                <p>Note that this function does not do URL decoding. If the URL you are using may be URL encoded (that is, if it uses %20 for spaces, and similar % encodings for other special characters), use <xslt-function-name>local-path-from-uri</xslt-function-name>.</p>
            </description>
            <return-value>
                <description>
                    <p>The path with the protocol part removed.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>path</name>
                    <description>
                        <p>The path to be processed.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>local-path-from-uri</name>
            <description>
                <p>The <xslt-function-name>local-path-from-uri</xslt-function-name> function takes a URL containing a protocol  (file, http, etc) and returns the part after the protocol, decoding the URL if required. For example, if will turn a URL like this:</p>
                <codeblock>file:/c:/Users/Joe%20Blogs/spfe-open-toolkit/spfe-ot/spfe.bat</codeblock>
                <p>into</p>
                <codeblock>c:/Users/Joe Blogs/spfe-open-toolkit/spfe-ot/spfe.bat</codeblock>
                <p>This is mostly useful for taking local file URIs returned by some tools and turning them into the local paths accepted by other tools.</p>
                <p>This function is similar to <xslt-function-name>path-after-protocol-part</xslt-function-name>, except that <xslt-function-name>path-after-protocol-part</xslt-function-name> does not do URL decoding. This function calls <xslt-function-name>path-after-protocol-part</xslt-function-name> to do its work, after decoding the URI. Calling this function on a URI that is not URL encoded will work fine, so you can always call this function rather than <xslt-function-name>path-after-protocol-part</xslt-function-name>.</p>
            </description>
            <return-value>
                <description>
                    <p>A URL-decoded version of the input URI with the protocol part removed.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>uri</name>
                    <description>
                        <p>The input URI.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>hex-to-dec</name>
            <description>
                <p>The <xslt-function-name>hex-to-dec</xslt-function-name> function takes are string representing a hexadecimal number and converts it to a decimal number.</p>
            </description>
            <return-value>
                <description>
                    <p>The interger value of the hexadecimal number.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>hex</name>
                    <description>
                        <p>A string representing the hexadecimal number to be converted.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>first-n-words</name>
            <description>
                <p>Returns that first number of words of a specified string, and optionally adds a specified suffix. For example, calling this function like this:</p>
                <codeblock>&lt;xsl:value-of select="sf:first-n-words('The quick brown fox', 3, '...')/></codeblock>
                
                <p>Will return:</p>
                
                <codeblock>The quick brown ...</codeblock>
                <p>This is useful for creating exerpts of a text to appear in a list or to lable a link.</p>
            </description>
            <return-value>
                <description>
                    <p>The truncated string with the specified prefix. If there number of words in the string is less than or equal to the number specified in the <code>words</code> parameter, the whole string is returned. The function recognizes words by matching spaces between words. The returned string includes the final space after the late matched world, if one exists in the input string. The suffix is added after this space. If specified, the suffix is always added, even if the whole string is returned.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>text</name>
                    <description>
                        <p>The string to be truncated.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>words</name>
                    <description>
                        <p>The number of words to be returned.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>suffix</name>
                    <description>
                        <p>The suffix string to be added to the returned string.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>escape-for-xml</name>
            <description>
                <p>Takes an input string and escapes the <code>&lt;</code> and <code>&amp;</code> characters so that the string can be inserted into an XML document. For example, given the string:</p>
                <codeblock>&lt;name>Five &amp; Dime&lt;/name></codeblock>
                <p>It will return the string</p>
                <codeblock>&amp;lt;name>Five &amp;amp; Dime&amp;lt;/name></codeblock>
                <p>This is useful for inserting examples of XML into an XML document.</p>
            </description>
            <return-value>
                <description>
                    <p>The input string with the <code>&lt;</code> and <code>&amp;</code> characters escaped.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>string</name>
                    <description>
                        <p>The string to be escaped for XML.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>get-topic-type-alias-singular</name>
            <!-- keep this in sync with otehr get-alias functions -->
            <description>
                <p>Gets the singular version of a <feature>topic type alias</feature>. Topic types are formally named using their XML namespace URIs. However, if you want to display the name of a topic type publicly, for instance in a list of topics or in the visible metadata of a topic, you will need a human readable name for the topic type: the topic type alias. Topic type aliases are defined in the configuration of a topic type, in the setting <config-setting>/topic-type/aliases</config-setting>. The topic type alias setting associates a singular and plural topic type alias with a topic type namespace URI: </p>
                <codeblock language="XML">
&lt;topic-type>
    &lt;xmlns>http://spfeopentoolkit.org/ns/spfe-docs&lt;/xmlns>
    &lt;aliases>
        &lt;singular>Configuration setting&lt;/singular>
        &lt;plural>Configuration settings&lt;/plural>
    &lt;/aliases>
                </codeblock>
                <p>The <xslt-function-name>get-topic-type-alias-singular</xslt-function-name> function looks up the singular version of the topic type alias in the configuration and returns it. To get the plural version of the alias, use the <spfe-build-function>get-topic-type-alias-plural</spfe-build-function>.</p>
            </description>
            <return-value>
                <description>
                    <p>The singular version of the topic type alias. An error occurs if a matching topic type alias is not found.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>topic-type-name</name>
                    <description>
                        <p>The namespace URI of the topic type. This is the value declared in the <code>xmlns</code> attribute of the topic source file:</p>
                        <codeblock language="XML">
&lt;function-and-template-descriptions
    xmlns="http://spfeopentoolkit.org/ns/spfe-docs"                            
                        </codeblock>
                        
                        <p>It is also the value declared in the <code>target-namespace</code> attribute of the <code>xsd:schema</code> element of the topic type schema:</p>
                        <codeblock language="XSD">
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
	targetNamespace="http://spfeopentoolkit.org/ns/spfe-docs">                            
                        </codeblock>
                        <p>Note, however, that it is possible for a <feature>synthesis stage</feature> script to output a topic in a different namespace from the input sources. This may particularly be the case if the synthesis stage is combining content from multiple sources. In this case the namespace of a topic may be different at the presentation stage than it was when it was written. This should not cause a problem as long as namespace aliases are declared for a namespace at the time you call this function.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>topic-set-id</name>
                    <description>
                        <p>The id of the current topic set.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>get-topic-type-alias-plural</name>
            <!-- keep this in sync with otehr get-alias functions -->
            <description>
                <p>Gets the plural version of a <feature>topic type alias</feature>. Topic types are formally named using their XML namespace URIs. However, if you want to display the name of a topic type publicly, for instance in a list of topics or in the visible metadata of a topic, you will need a human readable name for the topic type: the topic type alias. Topic type aliases are defined in the configuration of a topic type, in the setting <config-setting>/topic-type/aliases</config-setting>. The topic type alias setting associates a singular and plural topic type alias with a topic type namespace URI: </p>
                <codeblock language="XML">
&lt;topic-type>
    &lt;xmlns>http://spfeopentoolkit.org/ns/spfe-docs&lt;/xmlns>
    &lt;aliases>
        &lt;singular>Configuration setting&lt;/singular>
        &lt;plural>Configuration settings&lt;/plural>
    &lt;/aliases>
                </codeblock>
                <p>The <xslt-function-name>get-topic-type-alias-plural</xslt-function-name> function looks up the singular version of the topic type alias in the configuration and returns it. To get the plural version of the alias, use the <xslt-function-name>get-topic-type-alias-singular</xslt-function-name>.</p>
            </description>
            <return-value>
                <description>
                    <p>The plural version of the topic type alias. An error occurs if a matching topic type alias is not found.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>topic-type-name</name>
                    <description>
                        <p>The namespace URI of the topic type. This is the value declared in the <code>xmlns</code> attribute of the topic source file:</p>
                        <codeblock language="XML">
&lt;function-and-template-descriptions
    xmlns="http://spfeopentoolkit.org/ns/spfe-docs"                            
                        </codeblock>
                        
                        <p>It is also the value declared in the <code>target-namespace</code> attribute of the <code>xsd:schema</code> element of the topic type schema:</p>
                        <codeblock language="XSD">
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
	targetNamespace="http://spfeopentoolkit.org/ns/spfe-docs">                            
                        </codeblock>
                        <p>Note, however, that it is possible for the synthesis stage to output a topic in a different namespace from the input sources. This may particularly be the case if the synthesis stage is combining content from multiple sources. In this case the namespace of a topic may be different at the presentation stage than it was when it was written. This should not cause a problem as long as namespace aliases are declared for a namespace at the time you call this function.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>topic-set-id</name>
                    <description>
                        <p>The id of the current topic set.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>get-subject-type-alias-singular</name>
            <!-- keep this in sync with otehr get-alias functions -->
            <description>
                <p>Gets the singular version of a <feature>subject type alias</feature>. Subject types are the categories of subjects that a topic set discusses and which form the types of <feature>topic index</feature> entries and <feature>subject affinity markup</feature>. For example, the formal subject name for an XSLT function is <quotes>xslt-function-name</quotes>. Because they are XML names, the formal subject type names cannot contain spaces, so they are not suitable for displaying to the reader. If you want to display the name of a subject type publicly, for instance in a list of topics on a subject of a particular type, you will need a human readable name for the subject type: the subject type alias. Subject type aliases are defined in the <feature>content set configuration file</feature>, in the setting <config-setting>/topic-type/aliases</config-setting>. The topic type alias setting associates a singular and plural topic type alias with a topic type namespace URI: </p>
                <codeblock language="XML" namespace="http://spfeopentoolkit.org/ns/spfe-ot/config">
&lt;spfe xmlns="http://spfeopentoolkit.org/ns/spfe-ot/config"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://spfeopentoolkit.org/ns/spfe-ot/config http://spfeopentoolkit.org/spfe-ot/1.0/schemas/config/spfe-config.xsd">
    &lt;content-set>
    ...
        &lt;subject-types>
            &lt;subject-type>
                &lt;id>config-setting&lt;/id>
                &lt;aliases>
                    &lt;singular>Configuration setting&lt;/singular>
                    &lt;plural>Configuration settings&lt;/plural>
                &lt;/aliases>
            &lt;/subject-type>
        &lt;/subject-types>
                </codeblock>
                <p>The <xslt-function-name>get-subject-type-alias-singular</xslt-function-name> function looks up the singular version of the subject type alias in the configuration and returns it. To get the plural version of the alias, use the <xslt-function-name>get-subject-type-alias-plural</xslt-function-name>.</p>
            </description>
            <return-value>
                <description>
                    <p>The singular version of the subject type alias. An error occurs if a matching subject type alias is not found.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>subject-type-id</name>
                    <description>
                        <p>The id of the subject type. This is the value that is used in defining the type of the entry in the topic type index.</p>
                        <codeblock language="XML">
&lt;index>
    &lt;entry>
        &lt;type>feature&lt;/type>
        &lt;term>{configuration file}&lt;/term>
    &lt;/entry>
    &lt;entry>
        &lt;type>config-setting&lt;/type>
        &lt;term>/spfe&lt;/term>
    &lt;/entry>
&lt;/index>
                           
                        </codeblock>
                    </description>
                </parameter>
                <parameter>
                    <name>config</name>
                    <description>
                        <fragment id="config-description"><p>The config variable.</p></fragment>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>get-subject-type-alias-plural</name>
            <!-- keep this in sync with otehr get-alias functions -->
            <description>
                <p>Gets the plural version of a <feature>subject type alias</feature>. Subject types are the categories of subjects that a topic set discusses and which form the types of <feature>topic index</feature> entries and <feature>subject affinity markup</feature>. For example, the formal subject name for an XSLT function is <quotes>xslt-function-name</quotes>. Because they are XML names, the formal subject type names cannot contain spaces, so they are not suitable for displaying to the reader. If you want to display the name of a subject type publicly, for instance in a list of topics on a subject of a particular type, you will need a human readable name for the subject type: the subject type alias. Subject type aliases are defined in the <feature>content set configuration file</feature>, in the setting <config-setting>/topic-type/aliases</config-setting>. The topic type alias setting associates a singular and plural topic type alias with a topic type namespace URI: </p>
                <codeblock language="XML" namespace="http://spfeopentoolkit.org/ns/spfe-ot/config">
&lt;spfe xmlns="http://spfeopentoolkit.org/ns/spfe-ot/config"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://spfeopentoolkit.org/ns/spfe-ot/config http://spfeopentoolkit.org/spfe-ot/1.0/schemas/config/spfe-config.xsd">
    &lt;content-set>
    ...
        &lt;subject-types>
            &lt;subject-type>
                &lt;id>config-setting&lt;/id>
                &lt;aliases>
                    &lt;singular>Configuration setting&lt;/singular>
                    &lt;plural>Configuration settings&lt;/plural>
                &lt;/aliases>
            &lt;/subject-type>
        &lt;/subject-types>
                </codeblock>
                <p>The <xslt-function-name>get-subject-type-alias-plural</xslt-function-name> function looks up the plural version of the subject type alias in the configuration and returns it. To get the singlusr version of the alias, use the <xslt-function-name>get-subject-type-alias-singular</xslt-function-name>.</p>
            </description>
            <return-value>
                <description>
                    <p>The plural version of the subject type alias. An error occurs if a matching subject type alias is not found.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>subject-type-id</name>
                    <description>
                        <p>The id of the subject type. This is the value that is used in defining the type of the entry in the topic type index.</p>
                        <codeblock language="XML">
&lt;index>
    &lt;entry>
        &lt;type>feature&lt;/type>
        &lt;term>{configuration file}&lt;/term>
    &lt;/entry>
    &lt;entry>
        &lt;type>config-setting&lt;/type>
        &lt;term>/spfe&lt;/term>
    &lt;/entry>
&lt;/index>
                           
                        </codeblock>
                    </description>
                </parameter>
                <parameter>
                    <name>config</name>
                    <description>
                        <fragment-ref id-ref="config-description"/>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>get-topic-link-priority</name>
            <description>
                <p>Gets the <feature>link priority</feature> of a topic. Link priority is used to determine which topic to link to when more than one topic is identified as a source for a subject. Lower numbers indicate a higher priority.</p>
                <p>Link priority is calculated by adding the link priority of the <feature>topic type</feature>, defined in <config-setting>/topic-type/topic-type-link-priority</config-setting> to the link priority of the <feature>topic set</feature>, defined in <config-setting>/topic-set/topic-set-link-priority</config-setting>.</p>
            </description>
            <return-value>
                <description>
                    <p>The link priority of the topic.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>topic-type-name</name>
                    <description>
                        <p>The name of the <feature>topic type</feature>, as specified in its configuration file a <config-setting>/topic-type/name</config-setting>. By default, the <feature>resolve step</feature>  places the topic type name of the topic in the <xml-attribute-name namespace-uri="http://spfeopentoolkit.org/spfe-ot/1.0/schemas/synthesis" xpath="/ss:synthesis/ss:topic/@type">type</xml-attribute-name> attribute of the <xml-element-name namespace-uri="http://spfeopentoolkit.org/spfe-ot/1.0/schemas/synthesis" xpath="/ss:synthesis/ss:topic">ss:topic</xml-element-name> wrapper element.</p>
                        <codeblock>
&lt;ss:topic type="http://spfeopentoolkit.org/ns/eppo-simple"
    topic-type-alias="Task"
    full-name="http://spfeopentoolkit.org/spfe-docs/topic-types/think-plan-do-topic/adding-a-content-set"
    local-name="adding-a-content-set" title="Adding a new content set"
    excerpt="A content set (content-set) is a collection of one or more related topic sets, each of which can use different schemas. ...">

                        </codeblock>
                        <p>Since <task>linking</task> is done at the presentation stage, you can read the topic type namespace URI from this attribute for the topic you are processing.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>topic-set-id</name>
                    <description>
                        <p>The <config-setting xpath="/topic-set/topic-set-id">topic-set-id</config-setting> of the topic. The <config-setting xpath="/topic-set/topic-set-id">topic-set-id</config-setting> is passed as a parameter to every processing script.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>config</name>
                    <description>
                        <fragment-ref id-ref="config-description"/>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>name-in-clark-notation</name>
            <description>
                <p>Returns the name of an element using Clark notation. Clark notation is a way of adding the namespace that an element belongs to its name. It consists of the namespace URI in curly braces prepended to the local name (without prefix).</p>
            </description>
            <return-value>
                <description><p>The name of the element in Clark notation.</p></description>
            </return-value>
            <parameters>
                <parameter>
                    <name>element</name>
                    <description><p>The element whose name it to be given in Clark notation. Note that the parameter value must be the element itself, not an element name.</p></description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>process-placeholders</name>
            <description><p>
                Processes a string to determine if it contains placeholder markup in the form of a string contained between "{" and "}". Recognizes "{{}"   as an escape sequence for a literal "{". Nesting of placeholders is not supported. The use of a literal "{" or "}" inside the placeholder string is not supported. The function does not attempt to detect or report these         conditions, however.
                
                $string is the string to process.
                $literal-name is the element name to wrap around a the literal parts
                of $string.
                $placeholder-name is the element name to wrap around the placeholder
                parts of $string.
            </p></description>
            <return-value>
                <description><p>Returns an XML sequence in which the literal portions of the input string are wrapped in an element whose name is passed as the <code>literal-name</code> parameter and the placeholder portions of the string are wrapped in an element whose name is passed as the <code>placeholder-name</code>parameter.</p>
                <p>For example, given the following call:</p>
                <codeblock language="XSLT2">
                    <![CDATA[
sf:process-placeholders('foo{bar}bas','lit','var')
]]>
                </codeblock>
                <p>The return value would be an XML sequence like this:</p>
                <codeblock>
                    <![CDATA[
<lit>foo</lit><var>bar</var><lit>bas</lit>
]]>
                </codeblock></description>
            </return-value>
            <parameters>
                <parameter>
                    <name>string</name>
                    <description><p>The string to be processed.</p></description>
                </parameter>
                <parameter>
                    <name>literal-name</name>
                    <description><p>The name of the XML element to use to wrap the literal portions of the string.</p></description>
                </parameter>
                <parameter>
                    <name>placeholder-name</name>
                    <description><p>The name of the XML element to use to wrap the placeholder portions of the string.</p></description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>has-content</name>
            <description><p>Tests to see if an XML element has any text content.</p></description>
            <return-value>
                <description><p>True if the element has content. False otherwise.</p></description>
            </return-value>
            <parameters>
                <parameter>
                    <name>content</name>
                    <description><p>The element to be tested.</p></description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>pct-decode</name>
            <description>
                <p>Takes a string encoded using <link-external href="http://en.wikipedia.org/wiki/Percent-encoding">percent-encoding</link-external> (also know as URL encoding) and returns the decoded string. Adapted from code published by James A. Robinson at <url>http://www.oxygenxml.com/archives/xsl-list/200911/msg00300.html</url>. </p>
                <p>This is a recursive polymorphic function. You call the version of the function that takes one parameter, <code>in</code>. The second version of the function is called recursively by the first version to complete the decoding of the input string. It takes a second parameter, <code>seq</code>. You should not call this version of the function from your code.</p>
            </description>
            <return-value>
                <description>
                    <p>The decoded string.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>in</name>
                    <description>
                        <p>The string to be decoded.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>seq</name>
                    <description>
                        <p>Used internally by the function during recursion. Do not use this parameter in your code.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>path-depth</name>
            <description>
                <p>The <xslt-function-name>path-depth</xslt-function-name> calculates the depth of an XPath by counting the number of elements in the path. It uses tokenize to count but throws away the empty string item that would be created by a leading or trailing slash. Thus <code>foo/bar</code>, <code>/foo/bar</code>, and <code>/foo/bar/</code>, are all counted as having a path depth of 2. Will count a concluding attribute on a path as part of the depth. Presumably works for file paths as well, as long as they are in UNIX form, but it won't distinguish path elements from drive letters or the protocol parts of a URI.</p>
            </description>
            <return-value>
                <description>
                    <p>The number of elements in an XPath expression.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>path</name>
                    <description>
                        <p>The path expression.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>satisfies-condition</name>
            <description>
                <p>A recursive function that checks a series of conditions against a series of conditiont tokens and returns true if there is a match. It takes account of conditions joined by a plus sign, returning true only if both conditions are satisfied. This is a helper function for the <spfe-build-function>sf:conditions-met</spfe-build-function> function.</p>
            </description>
            <return-value>
                <description>
                    <p>True if the conditions match, otherwise false.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>conditions-list</name>
                    <description>
                        <p>A sequence consisting of conditions attached to an element.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>tokens-list</name>
                    <description>
                        <p>A sequence consisting of the condition tokens specified in the build.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>index</name>
                    <description>
                        <p>The index in the <xslt-function-parameter-name>tokens-list</xslt-function-parameter-name> to check in this recursion.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>string</name>
            <description>
                <p>The <xslt-function-name>string</xslt-function-name> function is used to resolve <feature>strings</feature>.</p>
            </description>
            <return-value>
                <description>
                    <p>The string that corresponds to the string ID.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>strings</name>
                    <description>
                        <p>A sequence of string elements.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>id</name>
                    <description>
                        <p>The ID of the string to return.</p>
                    </description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>local-to-url</name>
            <description>
                <p>Converts a local path expression into a file URL. Useful for calling XSLT functions that expect a URL.</p>
            </description>
            <return-value>
                <description><p>The path converted to a file URL.</p></description>
            </return-value>
            <parameters>
                <parameter>
                    <name>local-path</name>
                    <description><p>The local path to be converted.</p></description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>url-to-local</name>
            <description>
                <p>Converts a file URL into a local system path.</p>
            </description>
            <return-value>
                <description><p>The file URL as a local system path.</p></description>
            </return-value>
            <parameters>
                <parameter>
                    <name>url</name>
                    <description><p>The URL to be converted to a system path.</p></description>
                </parameter>
            </parameters>
        </function-description>
        <function-description>
            <name>escape-for-regex</name>
            <description>
                <p>Escapes a string value to make it suitable for inclusion in a regular expression as a literal string to be matched. </p>
            </description>
            <return-value>
                <description>
                    <p>The string with any characters that are reserved characters in a regular expression replaced by the appropriate escape sequence.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>string</name>
                    <description><p>The string to be escaped for use in a regular expression.</p></description>
                </parameter>
            </parameters>
        </function-description>
        <template-description>
            <name>error</name>
            <description>
                <!-- FIXME: Determine if setting message types to display is working and document accordingly. -->
                <p>Used to report an error in a script. The error template terminates the script unless the <code>terminate-on-error</code> parameter is set to false.</p>
            </description>
            <return-value>
                <description>
                    <p></p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>message</name>
                    <description>
                        <p>The error message to report. The template outputs this message prefixed with "ERROR: ".</p>
                    </description>
                </parameter>
                <parameter>
                    <name>in</name>
                    <description>
                        <fragment id='in-parameter-description'><p>A string describing the location where the error occurred. This might be a location in a data file or in a script, depending on what would be most useful to the user in identifying and fixing the source of the problem.</p></fragment>
                    </description>
                </parameter>
            </parameters>
        </template-description>
        <template-description>
            <name>info</name>
            <description>
                <p>Outputs a information message to the build console.</p>
            </description>
            <return-value>
                <description>
                    <p>None.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>message</name>
                    <description>
                        <p>The message to be output. The string "Info: " will be prefixed to the message.</p>
                    </description>
                </parameter>
            </parameters>
        </template-description>
        <template-description>
            <name>debug</name>
            <description>
                <p>Outputs a debug message to the build console.</p>
            </description>
            <return-value>
                <description>
                    <p>None.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>message</name>
                    <description>
                        <p>The message to be output. The string "Debug: " will be prefixed to the message.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>in</name>
                    <description><fragment-ref id-ref="in-parameter-description"/></description>
                </parameter>
            </parameters>
        </template-description>
        <template-description>
            <name>warning</name>
            <description>
                <p>Outputs a warning message to the build console.</p>
            </description>
            <return-value>
                <description>
                    <p>None.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>message</name>
                    <description>
                        <p>The message to be output. The string "Warning: " will be prefixed to the message.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>in</name>
                    <description><fragment-ref id-ref="in-parameter-description"/></description>
                </parameter>
            </parameters>
        </template-description>
        <template-description>
            <name>unresolved</name>
            <description>
                <p>Outputs a message to the build console stating that a particular <feature>subject affinity</feature> found in a topic could not be resolved to any subject in the index of any in-scope topic, meaning that no link will be created for that subject.</p>
            </description>
            <return-value>
                <description>
                    <p>None.</p>
                </description>
            </return-value>
            <parameters>
                <parameter>
                    <name>message</name>
                    <description>
                        <p>The message to be output. The string "Unresolved: No content to link to on subject " will be prefixed to the message.</p>
                    </description>
                </parameter>
                <parameter>
                    <name>in</name>
                    <description><fragment-ref id-ref="in-parameter-description"/></description>
                </parameter>
            </parameters>
        </template-description>
    </body>
</function-and-template-descriptions>
