<?xml version="1.0" encoding="utf-8"?>
<!-- This file is part of the SPFE Open Toolkit. See the accompanying license.txt file for applicable licenses.-->
<!-- (c) Copyright Analecta Communications Inc. 2012 All Rights Reserved. -->
<project name="spfe-rules" basedir="." default="draft">

	<xmlcatalog id="oasis-catalogs">
		<dtd publicId="-//OASIS//DTD XML Catalogs V1.1//EN"
			location="${SPFEOT_HOME}/1.0/schemas/catalog1.1.dtd"/>
	</xmlcatalog>
	<xmlcatalog id="spfe-catalogs">
		<classpath>
			<pathelement path="${SPFEOT_HOME}/tools/xml-commons-resolver-1.2/resolver.jar"/>
			<pathelement path="${SPFEOT_HOME}/tools/config"/>
		</classpath>
<!--		<catalogpath>
			<fileset dir="${SPFEOT_HOME}/1.0">
				<include name="**/catalog.xml"/>
			</fileset>
			<fileset dir="${SPFEOT_HOME}/plugins">
				<include name="**/catalog.xml"/>
			</fileset>
			<fileset dir="${HOME}/.spfe" erroronmissingdir="no">
				<include name="**/catalog.xml"/>
			</fileset>
		</catalogpath>-->

	</xmlcatalog>

	<!-- MACRO DEFINITIONS -->
	<macrodef name="saxon-xslt">
		<attribute name="style"/>
		<attribute name="in"/>
		<attribute name="out"/>
		<attribute name="initial-template" default="main"/>
		<element name="params"/>
		<sequential>
			
			<java classname="net.sf.saxon.Transform" failonerror="yes">
				<classpath>
					<pathelement path="${classpath}"/>
					<pathelement path="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar"/>
					<pathelement path="${SPFEOT_HOME}/tools/xml-commons-resolver-1.2/resolver.jar"/>
					<pathelement path="${SPFEOT_HOME}/tools/config"/>
				</classpath>
				<params/>
				<arg value="-s:@{in}"/>
				<arg value="-xsl:@{style}"/> 
				<arg value="-o:@{out}"/> 
				<arg value="-it:@{initial-template}"/>
				<arg value="-r:org.apache.xml.resolver.tools.CatalogResolver"/>
				<arg value="-x:org.apache.xml.resolver.tools.ResolvingXMLReader"/>
			</java>
			
<!--			<xslt classpath="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar" style="@{style}" in="@{in}"
				out="@{out}">
				<xmlcatalog refid="spfe-catalogs"/>
				<params/>
				<factory name="net.sf.saxon.TransformerFactoryImpl">
					<attribute name="http://saxon.sf.net/feature/initialTemplate"
						value="@{initial-template}"/>
				</factory>
			</xslt>-->
		</sequential>
	</macrodef>

	<!-- PROPERTY DEFINITIONS -->

	<!-- properties for the temporary files used -->
	<property name="temp" value="${spfe.build.build-directory}"/>

	<property name="output" value="${spfe.build.output-directory}"/>

	<target name="-begin-message">
		<echo/>
		<echo/>
		<echo>=====================================================</echo>
		<echo>Beginning ${ant.project.invoked-targets} build of ${spfe.content-set-id}</echo>
		<echo>====================================================</echo>
		<echo/>
		<echo/>
	</target>

	<!-- Initialization target -->
	<target name="-init" depends="-begin-message, -recorder"
		description="Initialization of properties." unless="already-initialized">

		<!-- avoid running -init twice so we don't run the last-build-crashed test twice -->
		<property name="already-initialized" value="true"/>

		<!-- check if the last build crashed -->
		<available property="last-build-crashed" file="${temp}/incomplete.flag"/>
		<antcall target="-check-last-build-status"/>

		<!-- mkdir in case no link catalogs have been created - make sure file list is created correctly even if empty. -->
		<mkdir dir="${spfe.build.link-catalog-directory}"/>
		<mkdir dir="${temp}"/>
	</target>

	<target name="-check-last-build-status" if="last-build-crashed">
		<echo/>
		<echo/>
		<echo>===========================================================================</echo>
		<echo>Last build failed and left a mess. Please run 'spfe -clean'. and try again.</echo>
		<echo>===========================================================================</echo>
		<echo/>
		<echo/>
		<fail/>
	</target>

	<!-- recorder target -->
	<target name="-recorder" if="spfe.topic-set-id">
		<echo message="Logging to: ${spfe.build.build-directory}/logs/${spfe.topic-set-id}.txt"/>
		<mkdir dir="${spfe.build.build-directory}/logs"/>
		<record name="${spfe.build.build-directory}/logs/${spfe.topic-set-id}-log.txt"
			action="start"/>
	</target>



	
	<!-- PDF -->

	<target name="-get.externals.style.print">
		<mkdir dir="${temp}/graphics"/>
		<copy todir="${temp}/graphics" preservelastmodified="true" verbose="yes">
			<fileset dir="${spfe.directories.fo-template.graphics}" id="files.graphics.fo-template"
			/>
		</copy>
	</target>

	<target name="-get.externals.graphics.print" depends="-build.image-list.print"
		if="image-list-print-has-content">
		<mkdir dir="${temp}/graphics"/>
		<copy todir="${temp}/graphics" flatten="true" failonerror="true" preservelastmodified="true"
			verbose="true">
			<fileset refid="files.graphics.print"/>
		</copy>
	</target>

	<!-- =========== -->
	<!-- BUILD STEPS -->
	<!-- =========== -->
	<!-- provides properties and rules for performing the build steps -->

	<!-- define properties for the temporary files used -->
	<!--<property name="files.extracted-content" value="extracted-content.xml"/>-->

	<!-- GET TARGETS
	<macrodef name="-get.source-files.authored-content">
		<sequential>
			<copy todir="${temp}/authored-content" verbose="true" preservelastmodified="true"
				flatten="true">
				<files refid="authored-content-for-merge"/>
			</copy>
		</sequential>
	</macrodef> -->

	<!-- DEPENDENCY TARGETS -->
	<!-- check to see if extracted-content is up to date -->
	<!-- FIXME: Need to test that this is working correctly both ways.
	<target name="-current.extracted-content">
		<uptodate property="-current.functions-defs" targetfile="${temp}/${files.extracted-content}">
			<srcresources>
				<files refid="sources-to-extract-content-from"/>
			</srcresources>
		</uptodate>
	</target> -->

	<!-- EXTRACT TARGET -->
	<!--<target name="-build.extracted-content" depends="-\-build.extracted-content"/>-->
	<macrodef name="build.extracted-content" description="extract content from source files">
		<attribute name="topic-set-id"/>
		<attribute name="style"/>
		<attribute name="output-directory"/>
		<element name="files-elements"/>
		<sequential>
			<local name="sources-to-extract-content-from"/>
			<files-elements/>
			<saxon-xslt 
				style="@{style}" 
				in="${spfe.config-file}"
				out="${spfe.build.build-directory}/topic-sets/@{topic-set-id}/extracted.flag">
				<params>
					<arg value="topic-set-id=@{topic-set-id}"/>
					<arg value="output-directory=@{output-directory}"/>
					<arg value="sources-to-extract-content-from=${sources-to-extract-content-from}"/>
					<arg value="draft=${draft}"/>
<!--					<param name="topic-set-id" expression="@{topic-set-id}"/>
					<param name="output-directory" expression="@{output-directory}"/>
					<param name="sources-to-extract-content-from"	expression="${sources-to-extract-content-from}"/>
					<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
					<param name="draft" expression="${draft}" if="draft"/>
-->				</params>
			</saxon-xslt>
		</sequential>
	</macrodef>


	<!-- MERGE STEP -->
	<target name="-build.merge" />
	<!-- macro to merge extracted contet with authored content -->
	<macrodef name="build.merge" description="merge">
		<attribute name="style"/>
		<attribute name="topic-set-id"/>
		<attribute name="output-directory"/>
		<element name="files-elements"/>
		<sequential>
			<local name="extracts-to-merge-content-with"/>
			<local name="authored-content-files"/>
			<files-elements/>
			<echo>Building merge for @{topic-set-id}.</echo>
			<saxon-xslt 
				style="@{style}" 
				in="${spfe.config-file}"
				out="${spfe.build.build-directory}/topic-sets/@{topic-set-id}/merge.flag">
				<params>
					<arg value="topic-set-id=@{topic-set-id}"/>
					<arg value="output-directory=@{output-directory}"/>
					<arg value="authored-content-files=${authored-content-files}"/>
					<arg value="extracted-content-files=${extracts-to-merge-content-with}"/>
					<arg value="draft=${draft}"/>
<!--					<param name="topic-set-id" expression="@{topic-set-id}"/>
					<param name="output-directory" expression="@{output-directory}"/>
					<param name="authored-content-files" expression="${authored-content-files}"/>
					<param name="extracted-content-files" expression="${extracts-to-merge-content-with}"/>
					<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
					<param name="draft" expression="${draft}" if="draft"/>
-->				</params>
			</saxon-xslt>
		</sequential>
	</macrodef>
	
	<!-- SYNTHESIS STEP -->
	<target name="-build.synthesis" depends="--build.synthesis"/>
	<!-- macro to build synthesis -->
	<macrodef name="build.resolve" description="resolve">
		<attribute name="style"/>
		<attribute name="topic-set-id"/>
		<attribute name="output-directory"/>
		<element name="files-elements"/>
		<sequential>
			<echo>Building synthesis for @{topic-set-id} in @{output-directory}.</echo>
			<!-- run the XSLT script to produce the output -->
			<local name="authored-content-files"/>
			<files-elements/>
			<saxon-xslt 
				style="@{style}" 
				in="${spfe.config-file}"
				out="${spfe.build.build-directory}/topic-sets/@{topic-set-id}/resolve.flag">
				<params>
					<arg value="topic-set-id=@{topic-set-id}"/>
					<arg value="authored-content-files=${authored-content-files}"/>
					<arg value="output-directory=@{output-directory}"/>
					<arg value="draft=${draft}"/>
<!--					<param name="topic-set-id" expression="@{topic-set-id}"/>
					<param name="authored-content-files" expression="${authored-content-files}"/>
					<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
					<param name="draft" expression="${draft}" if="draft"/>
-->				</params>
			</saxon-xslt>
		</sequential>
	</macrodef>
	

	<!-- LINK CATALOG STEP -->

	<!-- check if link-catalog is up to date 

	<target name="-current.link-catalog">
		<uptodate property="-current.link-catalog"
			targetfile="${spfe.build.link-catalog-directory}/${spfe.topic-set-id}.link-catalog"
			srcfile="${spfe.build.build-directory}/topic-sets/@{topic-set-id}/resolve.flag"/>
	</target>-->

	<!-- target for link-catalog -->
	<!--<target name="-build.link-catalog" depends="-build.resolve, -\-build.link-catalog"/>-->
	<macrodef name="build.link-catalog" description="Link catalog step.">
		<!-- FIXME		depends="-current.link-catalog"
		unless="-current.link-catalog">-->
		<attribute name="style"/>
		<attribute name="topic-set-id"/>
		<attribute name="output-directory"/>
		<sequential>
			<local name="synthesis-files"/>
			<local name="synthesis-files-list"/>
			<fileset id="synthesis-files" dir="${spfe.build.build-directory}/topic-sets/@{topic-set-id}">
				<include name="resolve/out/*.xml"/>
			</fileset>
			<pathconvert dirsep="/" pathsep=";" property="synthesis-files-list"
				refid="synthesis-files"/>

			<!-- run the XSLT script to produce the output -->
			<saxon-xslt 
				in="${spfe.config-file}" 
				style="@{style}"
				out="${spfe.build.build-directory}/topic-sets/@{topic-set-id}/link-catalog.flag">
				<params>
					<arg value="topic-set-id=@{topic-set-id}"/>
					<arg value="synthesis-files=${synthesis-files-list}"/>
<!--					<param name="topic-set-id" expression="@{topic-set-id}"/>
					<param name="synthesis-files" expression="${synthesis-files-list}"/>
-->				</params>
			</saxon-xslt>
		</sequential>
	</macrodef>


	<!-- macro for toc -->

	<macrodef name="build.toc" description="TOC step.">
		<!-- FIXME		depends="  -current.link-catalog" unless="-current.link-catalog">-->
		<attribute name="style"/>
		<attribute name="topic-set-id"/>
		<attribute name="output-directory"/>
		<sequential>
			
			<local name="synthesis-files"/>
			<local name="synthesis-files-list"/>
			<fileset id="synthesis-files" dir="${spfe.build.build-directory}/topic-sets/@{topic-set-id}">
				<include name="resolve/out/*.xml"/>
			</fileset>
			<pathconvert dirsep="/" pathsep=";" property="synthesis-files-list"
				refid="synthesis-files"/>

			<!-- run the XSLT script to produce the output -->
			<saxon-xslt 
				in="${spfe.config-file}" 
				style="@{style}"
				out="${spfe.build.build-directory}/topic-sets/@{topic-set-id}/toc.flag">
				<params>
					<arg value="topic-set-id=@{topic-set-id}"/>
					<arg value="synthesis-files=${synthesis-files-list}"/>
<!--					<param name="topic-set-id" expression="@{topic-set-id}"/>
					<param name="synthesis-files" expression="${synthesis-files-list}"/>
-->				</params>
			</saxon-xslt>
		</sequential>
	</macrodef>


	<!-- PRESENTATION STEP -->


	<!-- check to see if the html-presentation is up to date -->
	<target name="-current.presentation">
		<uptodate property="-current.presentation"
			srcfile="${spfe.build.build-directory}/topic-sets/@{topic-set-id}/synthesis.flag"
			targetfile="${temp}/presentation/presentation.flag"/>
	</target>

	<!-- build the presentation -->
	<target name="-build.presentation"
		depends="-build.synthesis, --build.presentation"/>
	<macrodef name="build.presentation" description="presentation step.">
		<!--		depends="-current.presentation"
		unless="-current.presentation">-->
		<attribute name="style"/>
		<attribute name="topic-set-id"/>
		<attribute name="output-directory"/>
		<attribute name="copy-to" default=""/>
		<sequential>
			<local name="synthesis-files"/>
			<local name="synthesis-files-list"/>
			<local name="toc-files"/>
			<local name="toc-files-list"/>
			<local name="link-catalog-files"/>
			<local name="link-catalog-list"/>
			<fileset id="synthesis-files" dir="${spfe.build.build-directory}/topic-sets/@{topic-set-id}">
				<include name="resolve/out/*.xml"/>
			</fileset>
			<pathconvert dirsep="/" pathsep=";" property="synthesis-files-list"
				refid="synthesis-files"/>
			<fileset id="toc-files" dir="${spfe.build.toc-directory}">
				<include name="*.xml"/>
			</fileset>
			<pathconvert property="toc-files-list" dirsep="/" pathsep=";" refid="toc-files"/>
			<fileset id="link-catalog-files" dir="${spfe.build.link-catalog-directory}">
				<include name="*.xml"/>
			</fileset>			
			<pathconvert property="link-catalog-files-list" dirsep="/" pathsep=";" refid="link-catalog-files"/>
			<!-- run the XSLT script to produce the output -->
			<saxon-xslt 
				style="@{style}" 
				in="${spfe.config-file}"
				out="@{output-directory}/presentation.flag">
				<params>
					<arg value="topic-set-id=@{topic-set-id}"/>
					<arg value="synthesis-files=${synthesis-files-list}"/>
					<arg value="link-catalog-files=${link-catalog-files-list}"/>
					<arg value="output-directory=@{output-directory}"/>
					<arg value="toc-files=${toc-files-list}"/>
<!--					<param name="topic-set-id" expression="@{topic-set-id}"/>
					<param name="synthesis-files" expression="${synthesis-files-list}"/>
					<param name="link-catalog-files" expression="${link-catalog-files-list}"/>
					<param name="output-directory" expression="@{output-directory}"/>
					<param name="toc-files" expression="${toc-files-list}"/>
-->				</params>
			</saxon-xslt>
			
			<!-- validate the output file -->
			<echo>Validating presentation files for @{topic-set-id}.</echo>
<!--			<xmlvalidate lenient="no">
				<fileset dir="@{output-directory}" includes="**/*.xml"/>
				<xmlcatalog refid="spfe-catalogs"/>
				<!-\- make the validation include namespaces -\->
				<attribute name="http://xml.org/sax/features/namespaces" value="true"/>
				<attribute name="http://apache.org/xml/features/validation/schema" value="true"/>
			</xmlvalidate>-->
			<condition property="copy-to-specified">
				<not>
					<equals arg1="${copy-to}" arg2=""/>
				</not>
			</condition>

			<copy todir="@{copy-to}" flatten="false" verbose="true">
				<fileset dir="@{output-directory}">
					<exclude name="*.*" unless="copy-to-specified"/>
					<include name="**/*.*" if="copy-to-specified"/>
				</fileset>
			</copy>
		</sequential>
	</macrodef>

	<!-- FORMAT STEP -->

	<!-- check to see if the format is up to date -->
	<target name="-current.format">
		<uptodate property="-current.format" targetfile="${temp}/format.flag"
			srcfile="${temp}/presentation.flag"/>
	</target>

	<target name="-build.format" depends="-build.presentation, --build.format"/>
	<macrodef name="build.format">
		<attribute name="style"/>
		<attribute name="topic-set-id"/>
		<attribute name="input-directory"/>
		<attribute name="output-directory"/>
		<element name="files-elements"/>
		<sequential>
			<local name="presentation-files"/>
			<local name="presentation-files-list"/>
			<local name="files.images.html"/>
			<local name="files.html.support-files"/>
			<local name="support-files"/>
			<local name="echo-files"/>
			<files-elements/>
			<pathconvert dirsep="/" pathsep=";" property="support-files"
				refid="files.html.support-files"/>
			<fileset dir="@{input-directory}" id="presentation-file-list">
				<include name="*.xml"/>
			</fileset>
			<pathconvert dirsep="/" pathsep=";" property="presentation-files"
				refid="presentation-file-list"/>
			<!-- run the XSLT script to produce the output -->
			<saxon-xslt 
				in="${spfe.config-file}" 
				style="@{style}"
				out="${spfe.build.build-directory}/topic-sets/@{topic-set-id}/format.flag">
				<params>
					<arg value="topic-set-id=@{topic-set-id}"/>
					<arg value="presentation-files=${presentation-files}"/>
<!--					<param name="topic-set-id" expression="@{topic-set-id}"/>
					<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
					<param name="presentation-files" expression="${presentation-files}"/>
-->				</params>
			</saxon-xslt>
			
			<!-- copy the image files to the image directory using list created by format script -->
			<!-- Need the excludes="*" because otherwise an empty incluesfile means copy everything -->
			<files id="files.images.html"
				includesfile="${spfe.build.build-directory}/topic-sets/@{topic-set-id}/image-list.txt" excludes="*"/>
	
			<mkdir dir="${spfe.build.output-directory}/@{output-directory}images"/>
			<copy todir="${spfe.build.output-directory}/@{output-directory}images" flatten="true" failonerror="false"
				preservelastmodified="true" verbose="true">
				<files refid="files.images.html"/>
			</copy>
			
			<!-- copy the support files (css, scripts, etc.) to the output directory -->
			<mkdir dir="${spfe.build.output-directory}/@{output-directory}style"/>		
			<!-- FIXME: the copy has to use flatten, because the files element contains absolute paths which do not copy as desired.
			            Should maybe switch to filesets, but that has issues at config level. -->
			<copy todir="${spfe.build.output-directory}/@{output-directory}style"  flatten="true" failonerror="false"
				preservelastmodified="true" verbose="true">
				<files refid="files.html.support-files"/>
			</copy>
			
		</sequential>
	</macrodef>
	

	<!-- ENCODE PDF STEP -->

	<!-- check to see if the format is up to date -->
	<target name="-current.pdf-encode">
		<uptodate property="-current.pdf-encode" targetfile="${output}/${spfe.pdf-name}"
			srcfile="{temp}/fo-format.flag"/>
	</target>

	<target name="-build.encode" depends=" -build.format, --build.encode"/>
	<macrodef name="build.encode" description="Encoding">
		<!--		depends=" -get.externals.graphics.print, 
		-get.externals.style.print, 
		-current.pdf-encode"
		unless="-current.pdf-encode"-->
		<!-- run the XSLT script to produce the output -->
		<!-- make sure the output directory exists -->
		<attribute name="topic-set-id"/>
		<attribute name="output"/>
		<sequential>
			<property name="temp" value="${spfe.build.build-directory}/topic-sets/@{topic-set-id}/temp"/>
			<mkdir dir="@{output}"/>
			<!--FIXME: generalize out the call of the encoder -->
			<fop format="application/pdf" fofile="${temp}/spfe.fo-format.fo"
				outfile="@{output}/${spfe.pdf-name}" basedir="${temp}"
				userconfig="${temp}/fop.xconf"/>
			<touch file="${temp}/pdf-format.flag"/>
		</sequential>
	</macrodef>


	<!-- IMAGE LIST STEP -->

	<!-- check to see if the image-list is up to date -->
	<target name="-current.image-list-html">
		<uptodate property="-current.image-list-html" targetfile="${temp}/image-list-html"
			srcfile="${temp}/presentation.flag"/>
	</target>

	<!-- check to see if the format is up to date -->
	<target name="-current.image-list.print">
		<uptodate property="-current.image-list.print" targetfile="${temp}/image-list-print"
			srcfile="{temp}/presentation.flag"/>
	</target>

	<target name="-build.image-list.print"
		depends="-build.presentation, -current.image-list.print"
		unless="-current.image-list.print">
		<saxon-xslt 
			in="${spfe.config-file}" 
			style="${spfe.scripts.image-list}"
			out="${temp}/image-list-print">
			<params>
				<arg value="topic-set-id=@{topic-set-id}"/>
				<arg value="synthesis-files=${synthesis-files}"/>
				<arg value="vector-if-available=yes"/>
<!--				<param name="topic-set-id" expression="@{topic-set-id}"/>
				<param name="synthesis-files" expression="${synthesis-files}"/>
				<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
				<param name="vector-if-available" expression="yes"/>
-->			</params>
		</saxon-xslt>
		<!--		<fileset id="files.graphics.print" dir="${spfe.directories.image-source}"
			includesfile="${temp}/image-list-print"/>-->
		<condition property="image-list-print-has-content">
			<isfileselected file="${temp}/image-list-print">
				<containsregexp expression="\S+"/>
			</isfileselected>
		</condition>
	</target>

	<!--===============-->
	<!-- USER COMMANDS -->
	<!--===============-->


	<!-- DRAFT -->
	<target name="draft" depends="-init">
		<touch file="${temp}/incomplete.flag" mkdirs="true"/>
		<antcall target="-draft"/>
		<delete file="${temp}/incomplete.flag"/>
	</target>

	<target name="-draft" depends="-draft-flag, -final" description="Build the draft online output."/>

	<target name="-draft-flag">
		<!-- this is a separate rule to ensure it runs before -final -->
		<property name="draft" value="yes"/>
		<touch file="${temp}/draft.flag" mkdirs="true"/>
	</target>

	<!-- FINAL -->
	<target name="final" depends="-init">
		<touch file="${temp}/incomplete.flag" mkdirs="true"/>
		<antcall target="-final"/>
		<delete file="${temp}/incomplete.flag"/>
	</target>
	<target name="-final" depends="-build.format" description="Build the final online output."/>

	<target name="-is-draft">
		<available property="is-draft" file="${temp}/draft.flag"/>
	</target>


	<!--	<!-\- WIP -\->
	<target name="wip" depends="-init, draft, pdf, -wip"/>
	<target name="-wip" description="Copy content to the work in progress website">
		<!-\- FIXME: Set failonerror to "no" to solve problems with non-SPFE things where there is nothing to copy. May be a better way to handle this. -\->
		<copy todir="${spfe.directories.internal-web}" preservelastmodified="true" failonerror="no">
			<fileset dir="${output}"/>
		</copy>
	</target>-->

	<!-- REPORT -->
	<target name="report" depends="-init">
		<touch file="${temp}/incomplete.flag" mkdirs="true"/>
		<antcall target="-report"/>
		<delete file="${temp}/incomplete.flag"/>
	</target>

	<target name="-report" description="Build all the report">
		<antcall target="-build.report"/>
	</target>

	<target name="test-mail">
		<property name="test-message"
			value="Congratulations ${spfe.mail.from}, you have successfully set up your environment to enable the SPFE build to send mail."/>
		<antcall target="-send-mail">
			<param name="spfe.mail.to" value="${spfe.mail.from}"/>
			<param name="mail.subject" value="Test message"/>
			<param name="mail.message" value="${test-message}"/>
		</antcall>
	</target>

	<target name="-send-mail">
		<mail mailhost="${spfe.mail.smtp.server}" mailport="${spfe.mail.smtp.port}"
			subject="${mail.subject}" encoding="plain">
			<from address="${spfe.mail.from}"/>
			<replyto address="${spfe.mail.from}"/>
			<to address="${spfe.mail.to}"/>
			<message>${mail.message}</message>
		</mail>
	</target>
</project>
