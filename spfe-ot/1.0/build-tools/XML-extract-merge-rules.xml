<?xml version="1.0" encoding="utf-8"?>
<!-- This file is part of the SPFE Open Toolkit. See the accompanying license.txt file for applicable licenses.-->
<!-- (c) Copyright Analecta Communications Inc. 2012 All Rights Reserved. -->
<project name="XML-source-extract-rules" default="draft">

	<!-- import the common SPFE definitions -->
	<import file="${SPFEOT_HOME}/1.0/build-tools/spfe-rules.xml"/>

	<!-- override the intermediate synthesis build taget to add -build.extracted-content to the dependencies -->
	<target name="-build.synthesis" depends="-build.extracted-content, --build.synthesis"/>

	<!-- define properties for the temporary files used -->
	<property name="files.extracted-content" value="extracted-content.xml"/>

	<!-- GET TARGETS -->
	<macrodef name="-get.source-files.authored-content">
		<sequential>
			<copy todir="${temp}/authored-content" verbose="true" preservelastmodified="true"
				flatten="true">
				<files refid="authored-content-for-merge"/>
			</copy>
		</sequential>
	</macrodef>

	<!-- DEPENDENCY TARGETS -->
	<!-- check to see if extracted-content is up to date -->
	<!-- FIXME: Need to test that this is working correctly both ways. -->
	<target name="-current.extracted-content">
		<uptodate property="-current.functions-defs" targetfile="${temp}/${files.extracted-content}">
			<srcresources>
				<files refid="sources-to-extract-content-from"/>
			</srcresources>
		</uptodate>
	</target>

	<!-- SYNTHESIS TARGETS -->
	<target name="-build.extracted-content" depends="--build.extracted-content"/>
	<macrodef name="build.extracted-content" description="extract content from source files">
		<attribute name="style"/>
		<attribute name="files"/>
		<!--<property name="xslt-files" refid="other.xslt-files"/>-->
		<sequential>
			<pathconvert property="sources-to-extract-content-from" refid="@{files}" pathsep=";"
				dirsep="/"/>
			<!--<property name="extracted-content" refid="other.extracted-content"/>-->
			<saxon-xslt style="@{style}" in="${spfe.config-file}"
				out="${temp}/${files.extracted-content}">
				<params>
					<param name="sources-to-extract-content-from"
						expression="${sources-to-extract-content-from}"/>
					<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
					<param name="draft" expression="${draft}" if="draft"/>
				</params>
			</saxon-xslt>

			<!-- validate the output file -->
			<xmlvalidate lenient="yes" file="${temp}/${files.extracted-content}">
				<!-- make the validation include namespaces -->
				<attribute name="http://xml.org/sax/features/namespaces" value="true"/>
			</xmlvalidate>
		</sequential>
	</macrodef>



	<!-- FIXME: Needs its own -current.synthesis because of the different location of the synthesis files. -->


	<!-- target to build synthesis -->
	
	<macrodef name="build.merge-synthesis" description="Sythesis for merging multiple sources">
		depends="-build.extracted-content, 
					 -get.source-files.authored-content"

		<basename property="source-files.authored-content.name"
			file="${source-files.authored-content}"/>

		<files id="authored-content-file-list">
			<include name="${temp}/authored-content/*.xml"/>
		</files>
		<property name="authored-content-files" refid="authored-content-file-list"/>

		<!-- run the XSLT script to produce the output -->
		<saxon-xslt in="${spfe.config-file}" style="${spfe.scripts.synthesis}"
			out="${temp}/synthesis.flag">

			<params>
				<param name="topic-files" expression="${topic-files}"/>
				<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
				<param name="extracted-content-files"
					expression="${temp}/${files.extracted-content}"/>
				<param name="authored-content-files" expression="${authored-content-files}"/>
				<param name="synthesis-directory" expression="${temp}/synthesis"/>
			</params>
		</saxon-xslt>
		<!-- validate the output file 
		<xmlvalidate lenient="yes" file="${temp}/${spfe.files.synthesis}">
			<!-/- make the validation include namespaces -/->
			<attribute name="http://xml.org/sax/features/namespaces" value="true"/>
		</xmlvalidate>-->
	</macrodef>
</project>
